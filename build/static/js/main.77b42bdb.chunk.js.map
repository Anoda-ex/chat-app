{"version":3,"sources":["Containers/Chat/Chat.module.css","Components/UI/Modal/Modal.module.css","Components/NoSelectChat/NoSelectChat.module.css","App.module.css","Components/UI/Background/Background.module.css","Components/UI/Button/Button.module.css","Components/Navigation/CreateChat/CreateChat.module.css","Containers/Chat/Message/Message.module.css","Containers/ChatsList/ChatItem/ChatItem.module.css","Components/Navigation/UserSetting/UserSetting.module.css","Containers/Chat/ImageInputModal/ImageInputModal.module.css","store/actionsConsts.js","store/chatsActions.js","Components/Auth/Auth.js","store/auth/actions.js","utils/consts.js","Components/MessageContent/MessageContent.js","scripts/Date.js","Containers/ChatsList/ChatItem/ChatItem.js","Components/UI/Background/Background.js","Components/UI/Modal/Modal.js","Components/UI/Button/Button.js","Components/Navigation/CreateChat/CreateChat.js","Components/Navigation/UserSetting/UserSetting.js","Components/Navigation/Navigation.js","Containers/ChatsList/ChatsList.js","Components/UI/ImagesBlock/ImagesBlock.js","scripts/getName.js","Containers/Chat/Message/Message.js","Containers/ListModal/ListModal.js","Containers/Chat/ImageInputModal/ImageInputModal.js","Containers/Chat/ChatMenu/ChatMenu.js","Containers/Chat/Chat.js","Components/NoSelectChat/NoSelectChat.js","routes.js","Components/Chats/Chats.js","App.js","store/auth/reducer.js","store/chatsReducer.js","index.js","Components/Auth/Auth.module.css","Containers/ChatsList/ChatsList.module.css","Components/Navigation/Navigation.module.css","Containers/ListModal/ListModal.module.css","Components/UI/ImagesBlock/ImagesBlock.module.css"],"names":["module","exports","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","SET_USER_INFO","AUTH_EXIT","CHAT_LOADING","CHAT_SUCCESS","CHAT_FAIL","CLEAN_CHATS_DATA","SET_USER_CHATS_LIST","SET_SEARCH_CHATS_LIST","APPEND_CHAT_MESSAGE","REMOVE_CHAT_MESSAGE","SET_MESSAGE","ADD_FIREBASE_USER_LISTENER","enterToChat","chatId","dispatch","state","firebase","database","ref","push","auth","UID","chat","subscribeInit","type","types","on","userChatSnapshot","handleChats","val","userDataSnapshot","user","userData","getChat","entryId","chats","chatDataSnapshot","chatData","once","lastChangeMessagesDateSnapshot","chatDataTransform","id","lastChangeMessagesDate","create","remove","orderByChild","chatMessageDataSnapshot","messageId","message","replyChatMessageId","messageDataSnapshot","messageData","messageDataTransform","chatMessageId","key","chatMessage","date","users","public","isMainUser","chatMessageRemovedSnapshot","userChatsList","Object","keys","forEach","chatsList","searchChatsList","deleteChat","Auth","isLogin","emailRef","React","createRef","passwordRef","props","current","value","componentWillUnmount","history","className","classes","Title","this","Input","placeholder","error","Error","IsLogin","onClick","setState","Button","Component","connect","loading","email","password","signInWithEmailAndPassword","then","userCredential","uid","catch","code","errorMessage","console","log","createUserWithEmailAndPassword","actions","withRouter","SELECT_CHAT","MessageContent","text","images","body","length","substr","fontSize","window","innerWidth","style","color","DAYS_S","transformNumber","nubmer","string","getDate","time","Date","dayRes","now","getHours","getMinutes","getDay","day","month","getMonth","year","getFullYear","substring","getDateHM","hours","minutes","to","Link","activeClassName","active","ChatItem","Avatar","delete","src","avatar","Wrapper","TopWrapper","Name","name","LastMessageTime","lastMessage","chatCreateDate","BottomWrapper","Background","level","zIndex","close","noPadding","padding","classList","Modal","show","Show","Fragment","join","children","buttonClasses","CreateChat","showImageInputModal","image","nameRef","descRef","imageInputRef","createChat","save","selectFile","event","file","target","files","reader","FileReader","onloadend","result","match","readAsDataURL","hideModal","AddChat","InputName","descImageWrapper","InputDesc","ImageWrapper","Image","click","display","onChange","accept","descArea","UserSetting","imagesModal","NameInputRef","NameWrapper","NameTitle","NameInput","SaveButton","Navigation","showCreateChat","showSetting","description","ListItem","userExit","userInfo","changeUserSetting","creator","ServerValue","TIMESTAMP","messagesData","lastChangeDate","searchName","response","path","pieces_","set","userListeners","off","ChatsList","showNavigation","selectChat","showModal","searchRef","height","Math","max","document","documentElement","clientHeight","innerHeight","chatsListMode","Burger","test","ChatsItems","sort","key1","key2","chat1","chat2","date1","map","chatMessages","messages","maxTime","values","NoSearchChat","search","startAt","endAt","snaphot","ImagesBlock","focusImage","getImageWidth","imagesCount","number","0","1","2","3","4","5","6","7","8","9","10","getImageHeight","changeFocusImage","imageIndex","focusImageIndex","countOfImages","nativeEvent","wheelDelta","ImagesWrapper","num","width","FocusImage","onWheel","userId","Message","author","isForward","wrapperClasses","MessageAuthor","replyMessage","MessageWithImages","MessageWrapper","onMouseDown","toggleSelectMessageHandler","onMouseUp","onDoubleClick","ForwardMessage","getName","AuthorName","Reply","ReplyUser","MessageText","select","Select","ListModal","wrapper","startForward","imageWrapper","ImageInputModal","selectFiles","Array","from","inputTextRef","inputFileRef","initImage","Images","TitleNoImages","ControlButtons","InputText","InputWrapper","multiple","htmlFor","send","ChatMenu","chatExit","isAdmin","Chat","selectMessages","canDeleteMessages","forwardMessages","showImageModal","imageModalInitImage","sendMessage","params","inputRef","getMessageFromChatEntry","deleteMessages","selectMessage","deleteMessage","SelectConfig","indexOf","toggleSelectMessage","splice","chatCreator","hideImageModal","chekClipboard","clipboardData","newChatId","forwardMessage","prevProps","filter","newMessage","m1","m2","Status","breakElement","headerContent","HeaderInfo","HeaderBackArrow","HeaderName","HeaderThreeDots","showChatMenu","HeaderSelect","HeaderButtonsWrapper","HeaderButton","HeaderButtonCancel","ChatWindow","ReplyWrapper","ReplyMessage","ReplyCancel","members","onPaste","SendIconWrapper","SendIcon","xmlns","sendIcon","viewBox","stroke","fill","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","EnterToChat","trim","newBody","chatExitSnapshot","orderByValue","chatMemberSnaphot","entryMemberId","NoSelectChat","authRoutes","Chats","isMobile","paths","component","exact","render","App","pushInfo","getInfo","dataSnapshot","addEventListener","forceUpdate","MainWindow","initState","isAuth","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","setPersistence","Persistence","NONE","rootReducer","combineReducers","action","prevChats","chatMessagesSuccess","prevChats1","chatMessagesAppend","chatMessagesRemove","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.77b42bdb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__1bloD\",\"Status\":\"Chat_Status__Ql6gi\",\"HeaderInfo\":\"Chat_HeaderInfo__2G3Jg\",\"HeaderSelect\":\"Chat_HeaderSelect__3gm3Z\",\"HeaderName\":\"Chat_HeaderName__3uhpI\",\"HeaderButtonsWrapper\":\"Chat_HeaderButtonsWrapper__4y1rF\",\"HeaderButton\":\"Chat_HeaderButton__1vM7Z\",\"HeaderButtonCancel\":\"Chat_HeaderButtonCancel__XvMOX\",\"HeaderBackArrow\":\"Chat_HeaderBackArrow__3D2Zc\",\"HeaderThreeDots\":\"Chat_HeaderThreeDots__3yO-x\",\"ChatWindow\":\"Chat_ChatWindow__3ssqY\",\"InputWrapper\":\"Chat_InputWrapper__rwoEC\",\"ReplyWrapper\":\"Chat_ReplyWrapper__dgVoe\",\"ReplyUser\":\"Chat_ReplyUser__2sq9b\",\"ReplyCancel\":\"Chat_ReplyCancel__sl7VD\",\"Input\":\"Chat_Input__KTqE8\",\"SendIconWrapper\":\"Chat_SendIconWrapper__1JfQ7\",\"SendIcon\":\"Chat_SendIcon__2P1ZI\",\"EnterToChat\":\"Chat_EnterToChat__3A9Hx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3vmMb\",\"Show\":\"Modal_Show__1UnyT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NoSelectChat\":\"NoSelectChat_NoSelectChat__INBWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainWindow\":\"App_MainWindow__2AJdN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"Background_Background__2HH-y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__J29al\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddChat\":\"CreateChat_AddChat__1-iru\",\"Title\":\"CreateChat_Title__3oqyJ\",\"Wrapper\":\"CreateChat_Wrapper__1ylPS\",\"ImageWrapper\":\"CreateChat_ImageWrapper__2QIz2\",\"Image\":\"CreateChat_Image__3eKjB\",\"descArea\":\"CreateChat_descArea__zhR5N\",\"InputName\":\"CreateChat_InputName__7FZOU\",\"InputDesc\":\"CreateChat_InputDesc__2rltr\",\"Input\":\"CreateChat_Input__-zo-o\",\"Button\":\"CreateChat_Button__S5Y0V\",\"descImageWrapper\":\"CreateChat_descImageWrapper__10lHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageWrapper\":\"Message_MessageWrapper__3HYPh\",\"Message\":\"Message_Message__2z-QA\",\"MessageWithImages\":\"Message_MessageWithImages__1p1gD\",\"MessageAuthor\":\"Message_MessageAuthor__f4Ejo\",\"Reply\":\"Message_Reply__w7vZc\",\"ReplyUser\":\"Message_ReplyUser__3Vnvg\",\"Select\":\"Message_Select__3_Zg1\",\"MessageText\":\"Message_MessageText__24o61\",\"ForwardMessage\":\"Message_ForwardMessage__3M7sB\",\"AuthorName\":\"Message_AuthorName__3rk53\",\"Date\":\"Message_Date__1eCVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatItem\":\"ChatItem_ChatItem__1arYK\",\"Wrapper\":\"ChatItem_Wrapper__2HMq-\",\"TopWrapper\":\"ChatItem_TopWrapper__2s6lw\",\"BottomWrapper\":\"ChatItem_BottomWrapper__1bQjq\",\"Avatar\":\"ChatItem_Avatar__1iOZk\",\"Link\":\"ChatItem_Link__2NKAA\",\"active\":\"ChatItem_active__1f8aB\",\"Name\":\"ChatItem_Name__3jRFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserSetting\":\"UserSetting_UserSetting__3JsuB\",\"TopWrapper\":\"UserSetting_TopWrapper__JTB1K\",\"Title\":\"UserSetting_Title__1ouIs\",\"ImageWrapper\":\"UserSetting_ImageWrapper__b9ZkD\",\"NameWrapper\":\"UserSetting_NameWrapper__2Ahoe\",\"NameTitle\":\"UserSetting_NameTitle__2jEPL\",\"NameInput\":\"UserSetting_NameInput__jE-6L\",\"IdWrapper\":\"UserSetting_IdWrapper__1CEZH\",\"SaveButton\":\"UserSetting_SaveButton__3z_HY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Component\":\"ImageInputModal_Component__2iK1E\",\"Images\":\"ImageInputModal_Images__3QoJw\",\"TitleNoImages\":\"ImageInputModal_TitleNoImages__1ZSz5\",\"Image\":\"ImageInputModal_Image__3toKf\",\"ControlButtons\":\"ImageInputModal_ControlButtons__3aCbB\",\"InputText\":\"ImageInputModal_InputText__81K4U\",\"Button\":\"ImageInputModal_Button__7RxFJ\"};","export const AUTH_START=\"AUTH_START\"\r\nexport const AUTH_SUCCESS=\"AUTH_SUCCESS\"\r\nexport const AUTH_FAIL=\"AUTH_FAIL\"\r\nexport const SET_USER_INFO=\"SET_USER_INFO\"\r\nexport const AUTH_EXIT=\"AUTH_EXIT\"\r\n\r\nexport const CHAT_LOADING=\"CHAT_LOADING\"\r\nexport const CHAT_SUCCESS=\"CHAT_SUCCESS\"\r\nexport const CHAT_FAIL=\"CHAT_FAIL\"\r\nexport const DELETE_CHAT=\"DELETE_CHAT\"\r\nexport const CLEAN_CHATS_DATA=\"CLEAN_CHATS_DATA\"\r\n\r\nexport const SET_USER_CHATS_LIST=\"SET_USER_CHATS_LIST\"\r\nexport const SET_SEARCH_CHATS_LIST=\"SET_SEARCH_CHATS_LIST\"\r\n\r\nexport const APPEND_CHAT_MESSAGE=\"APPEND_CHAT_MESSAGE\"\r\nexport const REMOVE_CHAT_MESSAGE=\"REMOVE_CHAT_MESSAGE\"\r\nexport const SET_MESSAGE=\"SET_MESSAGE\"\r\n\r\nexport const ADD_FIREBASE_USER_LISTENER=\"ADD_FIREBASE_USER_LISTENER\"","import { logDOM } from \"@testing-library/react\"\r\nimport firebase from \"firebase\"\r\nimport * as types from \"./actionsConsts\"\r\n\r\n\r\nexport const createChat=(name,description,image)=>{\r\n    return (dispatch,state)=>{\r\n        //добавить к чатам\r\n        let UID = state().auth.UID\r\n\r\n        firebase.database().ref(\"/chats\").push(\r\n            {\r\n               \r\n                chatData:{\r\n                    creator:state().auth.UID,\r\n                    name:name,\r\n                    description:description,\r\n                    create:firebase.database.ServerValue.TIMESTAMP,\r\n                },\r\n                messagesData:{\r\n                    lastChangeDate:firebase.database.ServerValue.TIMESTAMP\r\n                },\r\n                searchName:name\r\n\r\n            }\r\n        ).then(response=>{\r\n            //добавить в список чатов пользователя чат\r\n            // images.forEach(image)\r\n            if (image){\r\n                firebase.database().ref(\"/chats/\"+response.path.pieces_[1]+\"/chatData/images\").push(image)\r\n            }\r\n            firebase.database().ref(\"/users/\"+UID+\"/private/chats\").push({\r\n                chat:response.path.pieces_[1]\r\n            })\r\n            firebase.database().ref(\"/chats/\"+response.path.pieces_[1]+\"/chatData/members\").push(UID)\r\n        })\r\n    }\r\n}\r\nexport const enterToChat=(chatId)=>{\r\n    return (dispatch,state)=>{\r\n        //добавить к чатам\r\n        firebase.database().ref(\"/chats/\"+chatId+\"/chatData/members\").push(\r\n            \r\n               state().auth.UID\r\n            \r\n        )\r\n        firebase.database().ref(\"/users/\"+state().auth.UID+\"/private/chats\").push(\r\n            {\r\n                chat:chatId\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const deleteMessage=(chatId,messageId)=>{\r\n    return (dispatch,state)=>{\r\n        firebase.database().ref(\"/chats/\"+chatId+\"/messagesData/messages/\"+messageId).remove(\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n//подписка на получение иформации о своем аккаунте, вызывается при первом рендере листа чатов\r\nexport const subscribeInit=()=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n\r\n        //подписка на получение информации о чатаъ пользователя\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"users/\"+UID+\"/private/chats/\"\r\n        })\r\n        firebase.database().ref(\"users/\"+UID+\"/private/chats/\").on(\"value\",(userChatSnapshot)=>{\r\n            //обработка полученного списка чатов\r\n            dispatch(handleChats(\"init\",userChatSnapshot.val()))\r\n        \r\n            \r\n        })\r\n        //получение информации о пользователе, имя аватарка\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"users/\"+UID\r\n        })\r\n        firebase.database().ref(\"users/\"+UID).on(\"value\",(userDataSnapshot)=>{\r\n            dispatch({\r\n                type:types.SET_USER_INFO,\r\n                user:UID,\r\n                userData:userDataSnapshot.val()\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//получение чата\r\nexport const getChat=(chatId,entryId=false)=>{\r\n    return (dispatch,state)=>{\r\n        // если чат уже был подписан то не продолжать действия\r\n        if(state().chats.chats[chatId]){\r\n            return\r\n        }\r\n        let UID = state().auth.UID\r\n        // поставить чат в режим загрузки\r\n        dispatch({\r\n            type:types.CHAT_LOADING,\r\n            chatId:chatId\r\n        })\r\n        // получить информацию о чате(кроме сообщений)\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"chats/\"+chatId+\"/chatData\"\r\n        })\r\n        firebase.database().ref(\"chats/\"+chatId+\"/chatData\").on(\"value\",chatDataSnapshot=>{\r\n            const chatData = chatDataSnapshot.val()\r\n            //если чата не существует то удалить чат со списка чатов пользователя\r\n            //и поставить режим чата в не существует\r\n            if(!chatData){\r\n                dispatch({\r\n                    type:types.CHAT_FAIL,\r\n                    chatId:chatId\r\n                })\r\n                if(entryId){\r\n                    firebase.database().ref(\"users/\"+UID+\"/private/chats/\"+entryId).remove()\r\n                }\r\n            }\r\n            //если чат существует то получить дату последнего действия\r\n            else{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").once(\"value\",lastChangeMessagesDateSnapshot=>{\r\n\r\n                    const chatDataTransform={...chatData,id:chatId,}\r\n                    if(lastChangeMessagesDateSnapshot.val()){\r\n                        chatDataTransform.lastChangeMessagesDate=lastChangeMessagesDateSnapshot.val()\r\n                    }\r\n                    else{\r\n                        chatDataTransform.lastChangeMessagesDate=chatData.create\r\n                    }\r\n                    dispatch({\r\n                        type:types.CHAT_SUCCESS,\r\n                        chatId:chatId,\r\n                        chatData:chatDataTransform\r\n                    })\r\n                })\r\n            }\r\n\r\n        })\r\n        //получить все сообщения чата сортированные по дате и подписаться на добавление новых сообщений\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"chats/\"+chatId+\"/messagesData/messages\"\r\n        })\r\n        firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").orderByChild(\"date\").on(\"child_added\",chatMessageDataSnapshot=>{\r\n            //id сообщения\r\n            let messageId=chatMessageDataSnapshot.val().message\r\n            //id реплая на сообщение(в таблице чаты)\r\n            let replyChatMessageId=chatMessageDataSnapshot.val().replyChatMessageId\r\n            //получение самого сообщения \r\n            dispatch({\r\n                type:types.ADD_FIREBASE_USER_LISTENER,\r\n                ref:\"/messages/\"+messageId\r\n            })\r\n            firebase.database().ref(\"/messages/\"+messageId).on(\"value\",messageDataSnapshot=>{\r\n                const messageData=messageDataSnapshot.val()\r\n                //если сообщение есть то трансформировать его(записать туда id сообщения id сообщения реплая)\r\n                //и сохранить его \r\n                if(messageData){\r\n                    const messageDataTransform={...messageData,id:messageId}\r\n                    if(replyChatMessageId){\r\n                        messageDataTransform.replyChatMessageId=replyChatMessageId\r\n                    }\r\n                    //добавление в таблицу общих сообщений\r\n                    dispatch({\r\n                        type:types.SET_MESSAGE,\r\n                        messageId:messageId,\r\n                        messageData:messageDataTransform\r\n                    })\r\n                    //добавление в таблицу сообщений конкретного чата\r\n                    dispatch({\r\n                        type:types.APPEND_CHAT_MESSAGE,\r\n                        chatId:chatId,\r\n                        chatMessageId:chatMessageDataSnapshot.key,\r\n                        chatMessage:chatMessageDataSnapshot.val(),\r\n                        lastChangeMessagesDate:messageData.date\r\n                    })\r\n                    //получить информацию о отправителе сообщения\r\n                    if(!state()?.chats?.users[messageData.user]){\r\n                            dispatch({\r\n                                type:types.ADD_FIREBASE_USER_LISTENER,\r\n                                ref:\"users/\"+messageData.user+\"/public\"\r\n                            })\r\n                            firebase.database().ref(\"users/\"+messageData.user+\"/public\").on(\"value\",(userDataSnapshot)=>{\r\n                                dispatch({\r\n                                    type:types.SET_USER_INFO,\r\n                                    user:messageData.user,\r\n                                    userData:{public:userDataSnapshot.val()},\r\n                                    isMainUser:false\r\n                                })\r\n                            })\r\n                    }\r\n                    \r\n                }   \r\n            })\r\n        })\r\n        //если сообщение удалено то удалить его с сообщений конкретного чата\r\n        //сообщение все еще сохранено в приложении но не отображается \r\n        firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").on(\"child_removed\",chatMessageRemovedSnapshot=>{\r\n            dispatch({\r\n                type:types.REMOVE_CHAT_MESSAGE,\r\n                chatId:chatId,\r\n                chatMessageId:chatMessageRemovedSnapshot.key\r\n            })\r\n        })\r\n\r\n    }\r\n}\r\n\r\n// получение чатов со списка, переданного в функцию, имеет 2 режима \r\nexport const handleChats=(type,chats)=>{\r\n    return (dispatch,state)=>{\r\n        \r\n        //режим инициализации, срабатывает при обновления чатов пользователя\r\n        if(type==\"init\"){\r\n            if(chats){\r\n                let userChatsList=[]\r\n                Object.keys(chats).forEach(entryId=>{\r\n                    let chatId=chats[entryId].chat\r\n                    //подписка на чат\r\n                    dispatch(getChat(chatId,entryId))\r\n                    \r\n                    userChatsList.push(chats[entryId].chat)                \r\n                })\r\n                dispatch({\r\n                    type:types.SET_USER_CHATS_LIST,\r\n                    chatsList:userChatsList\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type:types.SET_USER_CHATS_LIST,\r\n                    chatsList:[]\r\n                })\r\n            }\r\n        }\r\n        //режим поиска, срабатывает для обработки поискового запроса на чаты\r\n        if(type==\"search\"){\r\n            if(!chats){\r\n                dispatch({\r\n                    type:types.SET_SEARCH_CHATS_LIST,\r\n                    chatsList:[]\r\n                })\r\n                return\r\n            }\r\n            let searchChatsList=[]\r\n            Object.keys(chats).forEach(entryId=>{\r\n                let chatId=entryId\r\n                //подписка на чат\r\n                dispatch(getChat(chatId))\r\n                searchChatsList.push(entryId)                \r\n            })\r\n            dispatch({\r\n                type:types.SET_SEARCH_CHATS_LIST,\r\n                chatsList:searchChatsList\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const sendMessage=(chatId,message,images,replyMessage)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n        let date=firebase.database.ServerValue.TIMESTAMP\r\n        let text=message.trim()\r\n        if(text.length<1 && images.length<1){\r\n            return \r\n        }\r\n        firebase.database().ref(\"messages/\").push({\r\n            user:UID,\r\n            text:text,\r\n            images:images,\r\n            date:date,\r\n        }).then(response=>{\r\n            let replyChatMessageId=null\r\n            if(replyMessage){\r\n                replyChatMessageId=replyMessage.chatMessageId\r\n            }\r\n            firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").push({\r\n                message:response.path.pieces_[1],\r\n                replyChatMessageId:replyChatMessageId,\r\n\r\n            }).then(()=>{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").set(date)\r\n            })\r\n\r\n        })\r\n    }\r\n}\r\nexport const forwardMessage=(chatId,message)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n        // firebase.database().ref(\"users/\"+UID+\"/chats\").off()\r\n        let date=firebase.database.ServerValue.TIMESTAMP\r\n        let newBody=null\r\n        if (message.isForward){\r\n            newBody={\r\n                ...message.body\r\n            }\r\n        }else{\r\n            newBody={\r\n                ...message\r\n            }\r\n        }\r\n        firebase.database().ref(\"messages/\").push({\r\n            user:UID,\r\n            body:newBody,\r\n            isForward:true,\r\n            date:date\r\n        }).then(response=>{\r\n\r\n            firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages/\").push({\r\n                message:response.path.pieces_[1],\r\n            }).then(()=>{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").set(date)\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//удалить чат с базы, подписки на чат удалятся сами через метод getChat()\r\nexport const deleteChat=(chatId)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n\r\n        firebase.database().ref(\"chats/\"+chatId).remove()\r\n    }\r\n}\r\n//поиск чатов\r\nexport const test=(search)=>{\r\n    return (dispatch,state)=>{\r\n        firebase.database().ref(\"chats/\").orderByChild('searchName').startAt(search).endAt(search+\"\\uf8ff\").once(\"value\",snaphot=>{\r\n            // dispatch({\r\n            //     type: types.SET_CHATS_LIST,\r\n            //     chatsList:Object.keys(snaphot.val())\r\n            // })\r\n            dispatch(handleChats(\"search\",snaphot.val()))\r\n        })\r\n    }\r\n}\r\n\r\nexport const chatExit=(chatId)=>{\r\n    return(dispatch,state)=>{\r\n        let UID=state().auth.UID\r\n        firebase.database().ref(\"users/\"+UID+\"/private/chats\").orderByChild(\"chat\").startAt(chatId).endAt(chatId+\"\\uf8ff\").once(\"value\",chatExitSnapshot=>{\r\n            let entryId=Object.keys(chatExitSnapshot.val())[0]\r\n            firebase.database().ref(\"users/\"+UID+\"/private/chats/\"+entryId).remove()\r\n            firebase.database().ref(\"chats/\"+chatId+\"/chatData/members/\").orderByValue().startAt(UID).endAt(UID+\"\\uf8ff\").once(\"value\",chatMemberSnaphot=>{\r\n                let entryMemberId=Object.keys(chatMemberSnaphot.val())[0]\r\n                firebase.database().ref(\"chats/\"+chatId+\"/chatData/members/\").remove(entryMemberId)\r\n            })\r\n            \r\n        })\r\n    }\r\n}","  \r\nimport React,{Component} from 'react';\r\n\r\nimport classes from \"./Auth.module.css\"\r\nimport {connect} from \"react-redux\"\r\nimport * as actions from \"../../store/index\"\r\nimport {withRouter} from \"react-router-dom\"\r\nclass Auth extends Component {\r\n  state={\r\n    isLogin:true\r\n  }\r\n  emailRef=React.createRef()\r\n  passwordRef=React.createRef()\r\n  auth=()=>{\r\n      this.props.auth(this.emailRef.current.value,this.passwordRef.current.value,this.state.isLogin)\r\n  }\r\n  // componentDidUpdate=()=>{\r\n  //   console.log(\" COMPONENT MOUNT\");\r\n  // }\r\n  componentWillUnmount=()=>{\r\n    // console.log(\"AUTH UNMOUNT\");\r\n    // this.props.subscribeInit()\r\n    this.props.history.push(\"/chats\")\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <h1 className={classes.Title}>{this.state.isLogin?\"Войдите в аккаунт\":\"Регистрация\"}</h1>\r\n        <input className={classes.Input} placeholder=\"Почта\" ref={this.emailRef}></input>\r\n        <input className={classes.Input} placeholder=\"Пароль\" ref={this.passwordRef}></input>\r\n        {this.props.error && <div className={classes.Error}>{this.props.error}</div>}\r\n        <div className={classes.IsLogin} onClick={()=>{this.setState(state=>({isLogin:!state.isLogin}))}}>{this.state.isLogin?\"Нет аккаунта?\":\"Войдите в аккаунт\"}</div>\r\n        <button className={classes.Button} onClick={this.auth}>{this.state.isLogin?\"Войти\":\"Зарегестрироваться\"}</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n      loading:state.auth.loading,\r\n      error:state.auth.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n      auth:(email,password,isLogin)=>dispatch(actions.auth(email,password,isLogin)),\r\n      subscribeInit:()=>dispatch(actions.subscribeInit())\r\n      \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Auth))","import * as types from \"../actionsConsts\"\r\nimport firebase from \"firebase\"\r\n\r\n\r\n\r\n// export const subscribeToChat=(dispatch,chatId)=>{\r\n//     firebase.database().ref(\"chats/\"+chatId).on(\"value\",dataSnapshot=>{\r\n//         const data=dataSnapshot.val()\r\n//         dispatch({\r\n//             type:types.ADD_CHAT,\r\n//             chat:data\r\n//         })\r\n//     })\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport const auth =(email,password,isLogin)=>{\r\n    return (dispatch)=>{\r\n        dispatch({\r\n            type:types.AUTH_START\r\n        })\r\n        if(isLogin){\r\n            firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                dispatch({\r\n                    type:types.AUTH_SUCCESS,\r\n                    UID:userCredential.user.uid\r\n                })\r\n                \r\n            })\r\n            .catch((error) => {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                console.log(errorMessage);\r\n                dispatch({\r\n                    type:types.AUTH_FAIL,\r\n                    error:errorMessage\r\n                })\r\n            });\r\n        }\r\n        else{\r\n            firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                dispatch({\r\n                    type:types.AUTH_SUCCESS,\r\n                    UID:userCredential.user.uid\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                dispatch({\r\n                    type:types.AUTH_FAIL,\r\n                    error:errorMessage\r\n                })\r\n            });\r\n        }\r\n    }\r\n} \r\nexport const changeUserSetting=(images=null,name=null)=>{\r\n    return (dispatch,state)=>{\r\n        if(images){\r\n            firebase.database().ref(\"users/\"+state().auth.UID+\"/public/images\").set(images)\r\n        }\r\n        if(name){\r\n            firebase.database().ref(\"users/\"+state().auth.UID+\"/public/name\").set(name)\r\n        }\r\n    }\r\n}\r\nexport const userExit=()=>{\r\n    return(dispatch,state)=>{\r\n        dispatch({\r\n            type:types.AUTH_EXIT\r\n        })\r\n        dispatch({\r\n            type:types.CLEAN_CHATS_DATA\r\n        })\r\n        state().auth.userListeners.forEach(path => {\r\n            firebase.database().ref(path).off()\r\n        });\r\n    }\r\n}\r\n\r\n","export const CHAT_LIST = '/chats'\nexport const NO_SELECT_CHAT = '/chats'\nexport const SELECT_CHAT = \"/chats/:id\"\nexport const SETTINGS = '/account-settings'\nexport const EMAIL_AUTH =\"/auth-email\"","import React from 'react'\r\nexport default function MessageContent(props) {\r\n    let messageData={text:props.message.text,images:props.message.images}\r\n    if(props.message.body){\r\n        messageData={text:props.message.body.text,images:props.message.body.images}\r\n    }\r\n    if (messageData.text.length>15){\r\n        messageData.text=messageData.text.substr(0,15)+\"...\"\r\n    }\r\n    let fontSize=18\r\n    if(window.innerWidth<1000){\r\n        fontSize=16\r\n    }\r\n    return (\r\n        <div>\r\n            <span style={{color:'gray',fontSize:fontSize}}>{messageData.images&&\"Фотография\"}</span>\r\n            {(messageData.images&&messageData.text)&&\", \"}\r\n            <span style={{fontSize:fontSize}}>{messageData.text&&messageData.text}</span>\r\n        </div>\r\n    )\r\n}\r\n","const DAYS=[\r\n    'Воскресенье' ,'Понедельник' , 'Вторник' , 'Среда' , 'Четверг' , 'Пятница' , 'Суббота' \r\n]\r\nconst DAYS_S=[\r\n    'вс', 'пн' , 'вт' , 'ср' , 'чт' , 'пт' , 'сб' \r\n]\r\nconst MONTHS=[\r\n\t'январь', 'февраль', 'марть',\r\n\t'апрель', 'маь', 'июнь',\r\n\t'июль', 'августь', 'сентябрь',\r\n\t'октябрь', 'ноябрь', 'декабрь'\r\n]\r\nconst transformNumber=(nubmer)=>{\r\n    let string=nubmer+\"\"\r\n    if(string.length<2){\r\n        return \"0\"+string\r\n    }else{\r\n        return string\r\n    }\r\n\r\n}\r\nexport const getDate=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let res = Date.now()-date\r\n    let dayRes=res/ (24*60*60*1000)\r\n    if(dayRes<1){\r\n        return transformNumber(date.getHours())+\":\"+transformNumber(date.getMinutes())\r\n    }\r\n    if(dayRes<7){\r\n        return DAYS_S[date.getDay()]\r\n    }\r\n    if(dayRes<12){\r\n        let day=date.getDay()+1\r\n        let month=date.getMonth()+1\r\n        let year=date.getFullYear()+\"\"\r\n        year=year.substring(2,4)\r\n        return transformNumber(day)+\".\"+transformNumber(month)+\".\"+year\r\n    }\r\n}\r\n\r\nexport const getDateHM=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let hours=date.getHours()+\"\"\r\n    let minutes=date.getMinutes()+\"\"\r\n    if(hours.length==1){\r\n        hours=\"0\"+hours\r\n    }\r\n    if(minutes.length==1){\r\n        minutes=\"0\"+minutes\r\n    }\r\n    return hours+\":\"+minutes\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport { getDate } from '../../../scripts/Date'\r\nimport classes from \"./ChatItem.module.css\"\r\n\r\nexport default (props)=> {\r\n  \r\n    return (\r\n        <NavLink to={\"/chats/\"+props.id} className={classes.Link} activeClassName={classes.active}>\r\n            <div className={classes.ChatItem} >\r\n                <div className={classes.Avatar} onClick={()=>{props.delete(props.id)}}>\r\n                    <img className={classes.Avatar} src={props.avatar?props.avatar:\"/Images/noPhoto.jpg\"}></img>\r\n                </div>\r\n                <div className={classes.Wrapper}>\r\n                    <div className={classes.TopWrapper}>\r\n                        <div className={classes.Name}>{props.name}</div>\r\n\r\n                        <div className={classes.LastMessageTime}>\r\n                            {getDate( props.lastMessage?props.lastMessage.date:props.chatCreateDate)}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.BottomWrapper}>\r\n                        {props.lastMessage?\r\n                            <MessageContent message={props.lastMessage}></MessageContent>:\r\n                            <div>Вы создали чат!!!</div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n        \r\n    )\r\n    \r\n}\r\n","import React from 'react'\r\nimport classes from \"./Background.module.css\"\r\nexport default function Background(props) {\r\n    let style={}\r\n    let level=props.level?props.level:1\r\n    style.zIndex=level*100\r\n    return (\r\n        <div className={classes.Background} onClick={props.close} style={style}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Background from '../Background/Background'\r\nimport classes from \"./Modal.module.css\"\r\nexport default (props)=> {\r\n        let style={}\r\n        // if(!props.show){\r\n            // return null\r\n        // }\r\n        if(props.noPadding){\r\n            style.padding=0\r\n            \r\n        }\r\n        let level=props.level?props.level:1\r\n        style.zIndex=level*101\r\n        let classList=[classes.Modal]\r\n        if(props.show){\r\n            classList.push(classes.Show)\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {props.show&&<Background close={props.close} level={props.level}></Background>}\r\n                <div className={classList.join(\" \")} style={style}>\r\n                    {props.children}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    \r\n}\r\n","import React from 'react'\r\nimport classes from \"./Button.module.css\"\r\nexport default function Button(props) {\r\n    let buttonClasses=[classes.Button]\r\n    if(props.className){\r\n        buttonClasses.push(props.className)\r\n    }\r\n    return (\r\n        <button className={buttonClasses.join(\" \")} onClick={props.onClick}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n","import React, { Component,createRef } from 'react'\r\nimport Modal from \"../../../Components/UI/Modal/Modal\"\r\nimport classes from \"./CreateChat.module.css\"\r\nimport Button from \"../../UI/Button/Button\"\r\nexport default class CreateChat extends Component {\r\n    state={\r\n        showImageInputModal:false,\r\n        image:false,\r\n       \r\n    }\r\n    nameRef=createRef()\r\n    descRef=createRef()\r\n    imageInputRef=createRef()\r\n    createChat=()=>{\r\n        this.props.createChat(this.nameRef.current.value,this.descRef.current.value,this.state.image)\r\n    }\r\n    save=(images)=>{\r\n        this.setState({images:images})\r\n    }\r\n    selectFile=(event)=>{\r\n            let file=event.target.files[0]\r\n            if(file){\r\n                let reader  = new FileReader();\r\n                reader.onloadend = (image)=> {\r\n                    if(image.target.result.match(image)){\r\n                        this.setState({image:image.target.result})\r\n\r\n                    }\r\n                }\r\n                reader.readAsDataURL(file)\r\n            }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} close={this.props.hideModal}>\r\n                <div className={classes.AddChat}>\r\n                    <h2 className={classes.Title}>Создать чат</h2>\r\n                    <div className={classes.Wrapper}>\r\n                        <h3 className={classes.InputName}>Введите имя чата</h3>\r\n                        <input  ref={this.nameRef} className={classes.Input}></input>\r\n\r\n                    </div>\r\n                    <div className={classes.Wrapper}>\r\n                        <div className={classes.descImageWrapper}>\r\n                            <h3 className={classes.InputDesc}>Введите описание чата</h3>\r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.setState({showImageInputModal:true})}}>\r\n                                <img className={classes.Image} onClick={()=>{this.imageInputRef.current.click()}} \r\n                                    src={this.state.image?\r\n                                        this.state.image\r\n                                        :\r\n                                        \"/Images/noPhoto.jpg\"}\r\n                                       >\r\n                                    \r\n                                </img>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" id=\"inputFile\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                        <textarea ref={this.descRef} className={classes.descArea}></textarea>\r\n\r\n                    </div>\r\n                  \r\n                    <Button onClick={this.createChat} >Создать чат</Button>\r\n\r\n                </div>\r\n                   \r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport Button from '../../UI/Button/Button'\r\nimport Modal from '../../UI/Modal/Modal'\r\nimport classes from \"./UserSetting.module.css\"\r\nexport class UserSetting extends Component {\r\n    state={\r\n        imagesModal:false\r\n    }\r\n    NameInputRef=React.createRef()\r\n    componentDidUpdate(){\r\n        // console.log(\"test\",this.props.public);]\r\n      \r\n        if(!!this.props.public&&!!this.NameInputRef.current){\r\n\r\n            this.NameInputRef.current.value=this.props.public.name\r\n        }\r\n    }\r\n    selectFile=(event)=>{\r\n        let file=event.target.files[0]\r\n        if(file){\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({imagesModal:image.target.result})\r\n\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    imageInputRef=React.createRef()\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={this.props.show} close={this.props.hideModal} level={2}>\r\n                    <div className={classes.UserSetting}>\r\n\r\n                   \r\n                        <h2 className={classes.Title}>Настройки аккаунта</h2>\r\n                        <div className={classes.TopWrapper}>\r\n                            \r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.imageInputRef.current.click()}}>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                    \r\n                                <img  src={this.state.imagesModal?this.state.imagesModal:\"/Images/noPhoto.jpg\"}></img>\r\n                            </div>\r\n                            <div className={classes.NameWrapper}>\r\n                                <h3 className={classes.NameTitle}>Имя пользователя</h3>\r\n                                <input ref={this.NameInputRef} className={classes.NameInput}></input>\r\n                                {/* <div className={classes.IdWrapper}>\r\n                                    {this.props.UID}\r\n                                </div> */}\r\n                            </div>\r\n                        </div>\r\n                        <Button className={classes.SaveButton} onClick={()=>{this.props.save(\"images\",this.NameInputRef.current.value);this.props.hideModal()}}>Сохранить изминения</Button>\r\n                    </div>\r\n                </Modal>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default UserSetting\r\n","import React, { Component } from 'react'\r\nimport Background from '../UI/Background/Background'\r\nimport classes from \"./Navigation.module.css\"\r\nimport CreateChat from \"./CreateChat/CreateChat\"\r\nimport * as actions from \"../../store/index\"\r\nimport {connect} from \"react-redux\"\r\nimport UserSetting from './UserSetting/UserSetting'\r\nclass Navigation extends Component {\r\n    state={\r\n        showCreateChat:false,\r\n        showSetting:false,\r\n    }\r\n\r\n    createChat=(name,description,image)=>{\r\n        this.props.createChat(name,description,image)\r\n        this.setState({showCreateChat:false})\r\n        this.props.close()\r\n    }\r\n    enterToChat=(chatId)=>{\r\n        this.props.enterToChat(chatId)\r\n        this.props.close()\r\n    }\r\n    setUserSetting\r\n    render() {\r\n        if(!this.props.show){\r\n            return null\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Background close={this.props.close}></Background>\r\n                <div className={classes.Navigation}>\r\n                    <ul>\r\n                        <li className={classes.ListItem} onClick={()=>{this.setState({showCreateChat:true})}}>\r\n                            Создать чат\r\n                        </li>\r\n                        <li className={classes.ListItem} onClick={()=>{this.setState({showSetting:true})}}>\r\n                            Настройки аккаунта\r\n                        </li>\r\n\r\n                        <li className={classes.ListItem} onClick={()=>{this.props.userExit()}}>\r\n                            Выйти с аккаунта\r\n                        </li>\r\n                    </ul>\r\n                     <CreateChat show={this.state.showCreateChat} hideModal={()=>{this.setState({showCreateChat:false})}} createChat={this.createChat}></CreateChat>\r\n                     <UserSetting show={this.state.showSetting} hideModal={()=>{this.setState({showSetting:false})}} UID={this.props.UID} public={this.props.userInfo?.public} save={this.props.changeUserSetting}></UserSetting>\r\n                </div> \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        UID:state.auth.UID,\r\n        userInfo:state.chats.users[state.auth.UID],\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        createChat:(name,description,image)=>dispatch(actions.createChat(name,description,image)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        changeUserSetting:(images,name)=>dispatch(actions.changeUserSetting(images,name)),\r\n        userExit:()=>dispatch(actions.userExit())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Navigation)\r\n","import React, { Component } from 'react'\r\nimport classes from \"./ChatsList.module.css\"\r\nimport ChatItem from \"./ChatItem/ChatItem\"\r\nimport * as actions from \"../../store/index\"\r\nimport {connect} from \"react-redux\"\r\nimport {withRouter} from \"react-router-dom\"\r\nimport Navigation from \"../../Components/Navigation/Navigation\"\r\nexport class ChatsList extends Component {\r\n    state={\r\n        showNavigation:false\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.UID && !this.props.users[this.props.UID]){\r\n            this.props.subscribeInit()\r\n\r\n        }\r\n    }\r\n    selectChat=(chatId)=>{\r\n        if(chatId){\r\n\r\n            this.props.history.push(\"/chats/\"+chatId)\r\n        }\r\n    }\r\n    showModal=()=>{\r\n        this.setState({showNavigation:true})\r\n    }\r\n    hideModal=()=>{\r\n        this.setState({showNavigation:false})\r\n    }\r\n    searchRef=React.createRef()\r\n    render() {\r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        let chats=this.props.chats\r\n        let chatsList=this.props.userChatsList\r\n        let chatsListMode=\"USER_CHATS_LIST\"\r\n        if(this.searchRef.current?.value){\r\n            chatsList=this.props.searchChatsList\r\n            chatsListMode=\"SEARCH_CHATS_LIST\"\r\n        }\r\n        return (\r\n            <div className={classes.ChatsList}>\r\n                <div className={classes.Navigation}>\r\n                    <div className={classes.Burger} onClick={this.showModal}>\r\n                        <img src=\"/Images/menuBurger.svg\"></img>\r\n                    </div>\r\n                    <div className={classes.Input}>\r\n                        <input ref={this.searchRef} placeholder=\"Поиск чатов\" onChange={()=>{this.props.test(this.searchRef.current.value)}}></input>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.ChatsItems} style={{height:height-50}}>\r\n                    {chatsList.length>0 ? chatsList.sort((key1,key2)=>{\r\n                        let chat1=chats[key1]\r\n                        let chat2=chats[key2]\r\n                        let date1=chat1.lastChangeMessagesDate?chat1.lastChangeMessagesDate:chat1.create\r\n                        let date2=chat2.lastChangeMessagesDate?chat2.lastChangeMessagesDate:chat2.create\r\n                        return date2-date1\r\n                    }).map(chatId=>{\r\n                        let chat=chats[chatId]\r\n                        if(chat==\"NOT_EXIST\"){\r\n                            return null\r\n                        }\r\n                        if(chat==\"LOADING\"){\r\n                            return null\r\n                        }\r\n                        let chatMessages=chat.messages\r\n                        let lastMessage=null\r\n                        if(Object.keys(chatMessages).length>0){\r\n                            let maxTime=-1;\r\n                            Object.values(chatMessages).forEach(chatMessage => {\r\n                                let message=this.props.messages[chatMessage.message]\r\n                                if (message.date>maxTime){\r\n                                    maxTime=message.date\r\n                                    lastMessage=message\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        return <ChatItem \r\n                                    key={chatId} \r\n                                    id={chat.id}\r\n                                    name={chat.name} \r\n                                    avatar={chat.images&&chat.images[Object.keys(chat.images)[Object.keys(chat.images).length-1]]}\r\n                                    chatCreateDate={chat.create}\r\n                                    delete={this.props.deleteChat}\r\n                                    lastMessage={lastMessage}\r\n                                    ></ChatItem>\r\n                    }):<div className={classes.NoSearchChat}>{chatsListMode==\"USER_CHATS_LIST\"?\"У вас еще нет чатов\":\"Чатов не найдено\"}</div>}\r\n                  \r\n                </div>\r\n            \r\n                <Navigation show={this.state.showNavigation} close={this.hideModal}></Navigation>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        userChatsList:state.chats.userChatsList,\r\n        searchChatsList:state.chats.searchChatsList,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n        // isUserLoad:state.chats.users[state.auth.UID]\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        // createChat:(name,description,image)=>dispatch(actions.createChat(name,description,image)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        subscribeInit:()=>dispatch(actions.subscribeInit()),\r\n        deleteChat:(chatId)=>dispatch(actions.deleteChat(chatId)),\r\n        test:(search)=>dispatch(actions.test(search))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(ChatsList))\r\n","import React from 'react'\r\nimport Background from '../Background/Background'\r\nimport Modal from '../Modal/Modal'\r\nimport classes from \"./ImagesBlock.module.css\"\r\nexport default class ImagesBlock extends React.Component {\r\n    state={\r\n        focusImage:-1\r\n    }\r\n    getImageWidth=(imagesCount,number)=>{\r\n        let imageWidthTable={\r\n            0:[0],\r\n            1:[100],\r\n            2:[100,100],\r\n            3:[100,50,50],\r\n            4:[100,100/3,100/3,100/3],\r\n            5:[100,50,50,50,50],\r\n            6:[100,50,50,100/3,100/3,100/3],\r\n            7:[100,100/3,100/3,100/3,100/3,100/3,100/3],\r\n            8:[50,50,50,50,50,50,50,50],\r\n            9:[50,50,50,50,50,50,100/3,100/3,100/3],\r\n            10:[50,50,50,50,100/3,100/3,100/3,100/3,100/3,100/3]\r\n        }   \r\n        return imageWidthTable[imagesCount][number]\r\n    }\r\n    getImageHeight=(imagesCount,number)=>{\r\n        let imageHeightTable={\r\n            0:[100],\r\n            1:[50],\r\n            2:[50],\r\n            3:[50],\r\n            4:[100/3],\r\n            5:[100/3],\r\n            6:[100/3],\r\n            7:[100/4],\r\n            8:[100/4],\r\n            9:[100/4],\r\n            10:[100/4]\r\n        }   \r\n        return imageHeightTable[imagesCount]\r\n    }\r\n    changeFocusImage=(event,imageIndex)=>{\r\n        let focusImageIndex=this.state.focusImage\r\n        let countOfImages=this.props.images.length\r\n        if(event.nativeEvent.wheelDelta<    0){\r\n  \r\n            if(focusImageIndex>=countOfImages-1){\r\n                focusImageIndex=0\r\n            }else{\r\n                focusImageIndex=focusImageIndex+1\r\n            }\r\n        }else{\r\n            if(focusImageIndex<=0){\r\n                focusImageIndex=countOfImages-1\r\n            }else{\r\n                focusImageIndex=focusImageIndex-1\r\n            }\r\n        }\r\n        this.setState({focusImage:focusImageIndex})\r\n    }\r\n    render(){\r\n        return (\r\n            <div className={classes.ImagesWrapper}>\r\n                        {this.props.images.map((image,num)=>{\r\n                            if(num<=10){\r\n\r\n                                return <div key={num}  style={{\r\n                                    width:this.getImageWidth(this.props.images.length,num)+\"%\",\r\n                                    height:this.getImageHeight(this.props.images.length,num)+\"%\",\r\n                                }}>\r\n                                    <img src={image} className={classes.Image} onClick={()=>{this.setState({focusImage:num})}}></img>\r\n                                </div>\r\n                            }\r\n                        })}\r\n\r\n                        {this.state.focusImage>-1 && <React.Fragment>\r\n                            <img className={classes.FocusImage} src={this.props.images[this.state.focusImage]} onClick={()=>{this.setState({focusImage:-1})}} onWheel={this.changeFocusImage}></img>\r\n                            <Background close={()=>{this.setState({focusImage:-1})}}></Background>   \r\n                        </React.Fragment>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default (users,userId)=>{\r\n    if (users[userId]?.public?.name ){\r\n        return users[userId].public.name  \r\n    }else{\r\n        return userId.substr(0,10)\r\n    }\r\n}","import React from 'react'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport ImagesBlock from '../../../Components/UI/ImagesBlock/ImagesBlock'\r\nimport { getDateHM } from '../../../scripts/Date'\r\nimport getName from '../../../scripts/getName'\r\nimport classes from \"./Message.module.css\"\r\nfunction Message(props) {\r\n    let style=null\r\n    if(props.author){\r\n        style={\r\n            marginLeft:\"auto\" \r\n        }\r\n    }\r\n  \r\n    let messageData={text:props.message.text,images:props.message.images}\r\n    if(props.message.isForward){\r\n        messageData={text:props.message.body.text,images:props.message.body.images}\r\n    }\r\n\r\n    let wrapperClasses=[classes.Message]\r\n    if(props.author){\r\n        wrapperClasses.push(classes.MessageAuthor)\r\n    }\r\n    if(!!props.images && !props.replyMessage && !props.isForward){\r\n        wrapperClasses.push(classes.MessageWithImages)\r\n    }\r\n    // let userName = getName(props.users,props.message.user)\r\n    let userForwardName = \"\"\r\n    // if(props.forwardUser){\r\n    //     userForwardName=getName(props.users,props.message.body.user)\r\n    // }\r\n    \r\n    return (\r\n        \r\n        <div className={classes.MessageWrapper} onMouseDown={props.toggleSelectMessageHandler} onMouseUp={props.toggleSelectMessageHandler} onDoubleClick={props.onDoubleClick}>\r\n            <div className={wrapperClasses.join(\" \")} >\r\n                {props.message.isForward&&<div className={classes.ForwardMessage}>Переслано от {getName(props.users,props.message.body.user)}</div>}\r\n                {!props.author&&!props.message.isForward&&<div className={classes.AuthorName}>{getName(props.users,props.message.user)}</div>}\r\n                {props.replyMessage&&<div className={classes.Reply}>\r\n                    <div className={classes.ReplyUser}>{getName(props.users,props.replyMessage.user)}</div>  \r\n                    <MessageContent message={props.replyMessage}></MessageContent>\r\n                </div>}\r\n\r\n                {messageData.images&&<ImagesBlock images={messageData.images}></ImagesBlock>}\r\n                \r\n                {messageData.text&&<p  className={classes.MessageText}>{messageData.text}</p>}\r\n                {props.select&&<div className={classes.Select}></div>}\r\n                <div className={classes.Date}>{getDateHM(props.message.date)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport classes from \"./ListModal.module.css\"\r\nimport Modal from \"../../Components/UI/Modal/Modal\"\r\nclass ListModal extends Component {\r\n    render() {\r\n        let chats=this.props.chats\r\n        return (\r\n            <Modal close={this.props.close} show={true}>\r\n                {/* <div className={classes.}>\r\n                    \r\n                </div> */}\r\n                <div className={classes.wrapper}>\r\n\r\n                    {Object.keys(chats).map(chatId=>{\r\n                        let chat=chats[chatId]\r\n                        return <div key={chatId} className={classes.chat} onClick={()=>{this.props.startForward(chatId)}}>\r\n                            <div className={classes.imageWrapper}></div>\r\n                            <h2 className={classes.name}>{chat.name}</h2>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chats: state.chats.chats\r\n    }    \r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(ListModal)","import React, { Component } from 'react'\r\nimport ImagesBlock from '../../../Components/UI/ImagesBlock/ImagesBlock'\r\nimport Modal from '../../../Components/UI/Modal/Modal'\r\nimport classes from \"./ImageInputModal.module.css\"\r\nexport default class ImageInputModal extends Component {\r\n    state={\r\n        images:[]\r\n    }\r\n    selectFiles=(event)=>{\r\n        console.log(typeof(event.target.files));\r\n        Array.from(event.target.files).forEach((file,id)=>{\r\n            console.log(file);\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                this.setState(state=>({images:[...state.images,image.target.result]}))\r\n            }\r\n            reader.readAsDataURL(file)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.initImage){\r\n            this.setState((state)=>({images:[...state.images,this.props.initImage]}))\r\n        }else{\r\n            this.inputFileRef.current.click()\r\n\r\n        }\r\n        console.log(\"imageInputModal\",this.props.initImage);\r\n\r\n    }\r\n\r\n    inputTextRef=React.createRef()\r\n    inputFileRef=React.createRef()\r\n    render() {\r\n        \r\n        return (\r\n            <Modal close={this.props.close} show={this.props.show}>\r\n                <div className={classes.Component}>\r\n                    {this.state.images.length>0?\r\n                    <div className={classes.Images}><ImagesBlock images={this.state.images}></ImagesBlock></div>\r\n                    :<div className={classes.TitleNoImages}>Нет фотографий, выберите их</div>}\r\n\r\n                    \r\n                    <div className={classes.ControlButtons}>\r\n                        <input className={classes.InputText} type=\"text\" ref={this.inputTextRef} placeholder=\"Подпись\"></input>\r\n                        <div className={classes.InputWrapper}>\r\n                            <input multiple  id=\"inputFile\" type=\"file\" onChange={this.selectFiles} style={{display:\"none\"}}></input>\r\n                            <label className={classes.Button} ref={this.inputFileRef} htmlFor=\"inputFile\">Выберите файл</label>\r\n                        </div>\r\n                        <button className={classes.Button} onClick={()=>{this.props.send(false,this.inputTextRef.current.value,this.state.images);this.props.close()}}>Сохранить</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Modal from '../../../Components/UI/Modal/Modal'\r\n\r\nexport class ChatMenu extends Component {\r\n    render() {\r\n        return (\r\n            <Modal show={true} close={this.props.close}>\r\n                <div onClick={this.props.chatExit}>Выйти с чата</div>\r\n                {this.props.isAdmin&&<div onClick={this.props.deleteChat}>Удалить чат</div>}\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatMenu\r\n","import React, { Component } from 'react'\r\nimport classes from \"./Chat.module.css\"\r\nimport Message from \"./Message/Message\"\r\nimport * as actions from \"../../store/index\"\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ListModal from '../ListModal/ListModal';\r\nimport ImageInputModal from './ImageInputModal/ImageInputModal';\r\nimport MessageContent from '../../Components/MessageContent/MessageContent';\r\nimport ChatMenu from './ChatMenu/ChatMenu';\r\nclass Chat extends Component {\r\n    state={\r\n        selectMessages:[],\r\n        canDeleteMessages:false,\r\n        forwardMessages:null,\r\n        showImageModal:false,\r\n        imageModalInitImage:null,\r\n        replyMessage:null,\r\n    }\r\n\r\n    componentDidUpdate(prevProps,state){\r\n        if(this.props.match.params.id!=prevProps.match.params.id){\r\n            this.setState({ \r\n                selectMessages:[],\r\n                canDeleteMessages:false,\r\n                forwardMessages:false,\r\n                replyMessage:false\r\n            })\r\n            let chat=this.props.chats[this.props.match.params.id]\r\n            if(!chat){\r\n                this.props.getChat(this.props.match.params.id)\r\n            }\r\n\r\n            return \r\n        }\r\n        if(this.props.chats[this.props.match.params.id]?.messages!=prevProps.chats[this.props.match.params.id]?.messages){\r\n            let selectMessages=[...state.selectMessages]\r\n            let chatMessages=this.props.chats[this.props.match.params.id].messages\r\n            let replyMessage=this.state.replyMessage\r\n            if(chatMessages){\r\n                selectMessages=selectMessages.filter(selectMessage=>{\r\n                    return chatMessages[selectMessage]\r\n                })\r\n                if (replyMessage&&!chatMessages[replyMessage.chatMessageId]){\r\n                    replyMessage=false\r\n                }\r\n            }else{\r\n                selectMessages=[]\r\n                replyMessage=false\r\n            }\r\n            this.setState({selectMessages:selectMessages,canDeleteMessages:this.canDeleteMessages(selectMessages),replyMessage:replyMessage})\r\n        }\r\n    }\r\n    sendMessage=(event,text,images)=>{\r\n        if(event){\r\n            this.props.sendMessage(this.props.match.params.id,this.inputRef.current.value,[],this.state.replyMessage)\r\n            \r\n        }else{\r\n            this.props.sendMessage(this.props.match.params.id,text,images,this.state.replyMessage)\r\n        }\r\n        this.inputRef.current.value=\"\"\r\n    }\r\n    getMessageFromChatEntry=(chatMessageId)=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        if(chat.messages[chatMessageId]){\r\n            return this.props.messages[chat.messages[chatMessageId].message]\r\n\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    deleteMessages=()=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        this.state.selectMessages.map(selectMessage=>{\r\n            if(this.state.canDeleteMessages){\r\n                this.props.deleteMessage(this.props.match.params.id,selectMessage)\r\n            }\r\n        })\r\n        this.setState({selectMessages:[]})\r\n    }\r\n    SelectConfig={}\r\n    toggleSelectMessageHandler=(chatMessageId,event)=>{\r\n        if(event.type==\"mousedown\"){\r\n            this.SelectConfig[chatMessageId]=Date.now()\r\n            if(this.state.selectMessages.indexOf(chatMessageId)!=-1){\r\n                this.toggleSelectMessage(chatMessageId)\r\n            }\r\n        }        \r\n        if(event.type==\"mouseup\"){\r\n            if((Date.now()-this.SelectConfig[chatMessageId])/1000>0.2){\r\n                this.toggleSelectMessage(chatMessageId)\r\n                this.SelectConfig[chatMessageId]=0\r\n            }\r\n\r\n        }        \r\n    }\r\n    toggleSelectMessage=(chatMessageId)=>{\r\n        let selectMessages=[...this.state.selectMessages]\r\n        if(this.state.selectMessages.indexOf(chatMessageId)==-1){\r\n            selectMessages.push(chatMessageId)\r\n        }else{\r\n            selectMessages.splice(selectMessages.indexOf(chatMessageId),1)\r\n        }\r\n        let canDeleteMessages=this.canDeleteMessages(selectMessages)\r\n        this.setState({selectMessages:selectMessages,canDeleteMessages:canDeleteMessages})\r\n    }\r\n    canDeleteMessages=(selectMessages)=>{\r\n        let UID=this.props.UID\r\n        let chatCreator=this.props.chats[this.props.match.params.id].creator\r\n        let canDeleteMessages=true\r\n        if(selectMessages.length<1){\r\n            canDeleteMessages=false\r\n        }else{\r\n            selectMessages.forEach(selectMessage=>{\r\n                canDeleteMessages*= ((UID==chatCreator||UID==this.getMessageFromChatEntry(selectMessage)?.user)&&!!this.props.chats[this.props.match.params.id].messages[selectMessage])\r\n            })\r\n        }\r\n        return !!canDeleteMessages\r\n    }\r\n    showImageModal=()=>{\r\n        this.setState({showImageModal:true})\r\n    }\r\n    hideImageModal=()=>{\r\n        this.setState({showImageModal:false,imageModalInitImage:null})\r\n    }\r\n    chekClipboard=(event)=>{\r\n        if(event.clipboardData.files.length>0){\r\n            let file=event.clipboardData.files[0]\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({showImageModal:true,imageModalInitImage:image.target.result})\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    forwardMessages=(newChatId)=>{\r\n        this.setState({forwardMessages:true})\r\n        this.state.selectMessages.forEach(chatMessageId=>{\r\n            this.props.forwardMessage(newChatId,this.getMessageFromChatEntry(chatMessageId))\r\n        })\r\n        this.setState({forwardMessages:false,selectMessages:[]})\r\n        this.props.history.push(\"/chats/\"+newChatId)\r\n    }\r\n  \r\n    inputRef=React.createRef()\r\n    render() {\r\n        //формирование массива сообщений с чата\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        let chatMessages=[]\r\n        if(chat && chat.messages){\r\n            Object.keys(chat.messages).map((messageId,num)=>{\r\n                if(this.props.messages[chat.messages[messageId].message]){\r\n                    let newMessage={...this.getMessageFromChatEntry(messageId),chatMessageId:messageId}\r\n                    chatMessages.push(newMessage)\r\n                \r\n                }\r\n            })\r\n        }\r\n        chatMessages.sort((m1,m2)=>{\r\n            return m1.date-m2.date\r\n        })\r\n        \r\n        //Загрузка\r\n        if(!chat || chat==\"LOADING\"){\r\n            return  <div className={classes.Chat}>\r\n                        <div className={classes.Status}>Загрузка...</div>\r\n                    </div>\r\n        }\r\n        //Чата не существует\r\n\r\n        if(chat==\"NOT_EXIST\"){\r\n            let breakElement=null\r\n            if(window.innerWidth<=650){\r\n                breakElement=<br></br>\r\n            }\r\n            return  <div className={classes.Chat} onClick={()=>{this.props.history.push(\"/chats\")}}>\r\n                        <div className={classes.Status} >Чата не существует {breakElement} или {breakElement} он бы удален</div>\r\n                    </div>\r\n        }\r\n\r\n        //обрабока хедера чата\r\n        let headerContent=null\r\n        if(this.state.selectMessages.length<1){\r\n            //Обычный режим\r\n            headerContent=<div className={classes.HeaderInfo}>\r\n                <img className={classes.HeaderBackArrow} onClick={()=>{this.props.history.push(\"/chats\")}} src=\"/Images/backArrow.svg\"></img>\r\n                <div className={classes.HeaderName}>{chat.name}</div>\r\n                <img className={classes.HeaderThreeDots} onClick={()=>{this.setState({showChatMenu:true})}} src=\"/Images/threeDots.svg\"></img>\r\n            </div>\r\n        }else{\r\n            //Режим выделенных сообщений\r\n            headerContent=<div className={classes.HeaderSelect}>\r\n                <div className={classes.HeaderButtonsWrapper}>\r\n                    {this.state.canDeleteMessages&&<button className={classes.HeaderButton} onClick={this.deleteMessages}>\r\n                        Удалить\r\n                    </button>}\r\n                    <button className={classes.HeaderButton} onClick={()=>{this.setState({forwardMessages:true})}}>\r\n                        Переслать\r\n                    </button>\r\n                </div>\r\n                <button className={classes.HeaderButtonCancel} onClick={()=>{this.setState({selectMessages:[]})}}>Отмена</button>\r\n            </div>\r\n        }\r\n    \r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        return (\r\n            <div className={classes.Chat}>\r\n                {headerContent}\r\n                <div className={classes.ChatWindow} style={{\"height\":height-120-(this.state.replyMessage?50:0)  }}>\r\n                    {chatMessages.map(message=>{\r\n                        return  <Message \r\n                            key={message.id}\r\n                            toggleSelectMessageHandler  ={(event)=>{this.toggleSelectMessageHandler(message.chatMessageId,event)}} \r\n                            select={this.state.selectMessages.indexOf(message.chatMessageId)!=-1}\r\n                            author={message.user==this.props.UID}\r\n                            message={message} \r\n                            onDoubleClick={()=>{this.setState({replyMessage:message})}}\r\n                            users={this.props.users}\r\n                            replyMessage={this.getMessageFromChatEntry(message.replyChatMessageId)}\r\n                            // user={this.props.users[message.user]}\r\n                            // replyMessageUser={this.getMessa}\r\n                            // forwardUser={message.isForward && this.props.users[message.body.user]}\r\n                            >\r\n                        </Message>\r\n                    })}\r\n                </div>\r\n                \r\n                {this.state.replyMessage&&<div className={classes.ReplyWrapper}>\r\n                    <div className={classes.ReplyUser}>{this.state.replyMessage.user}</div>\r\n                    <div className={classes.ReplyMessage}>\r\n                        <MessageContent message={this.state.replyMessage}></MessageContent>\r\n                    </div>\r\n                    <span className={classes.ReplyCancel} onClick={()=>{this.setState({replyMessage:null})}}>✖</span>\r\n                </div>}\r\n\r\n                {Object.values(chat.members).indexOf(this.props.UID)>-1\r\n                ?\r\n                <div  className={classes.InputWrapper}>\r\n                    <textarea ref={this.inputRef} className={classes.Input} onPaste={this.chekClipboard}></textarea>\r\n                    <div className={classes.SendIconWrapper} onClick={this.showImageModal}>\r\n                        <img className={classes.SendIcon} src=\"/Images/camera.svg\"></img>\r\n                    </div>\r\n\r\n                    <div className={classes.SendIconWrapper} onClick={this.sendMessage} >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className={\"icon icon-tabler icon-tabler-send \"+classes.sendIcon} viewBox=\"0 0 24 24\"  stroke=\"#2c3e50\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                            <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\" />\r\n                            <path d=\"M21 3l-6.5 18a0.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a0.55 .55 0 0 1 0 -1l18 -6.5\" />\r\n                        </svg>\r\n                    </div>    \r\n                </div>\r\n                :\r\n                <div className={classes.EnterToChat} onClick={()=>{this.props.enterToChat(this.props.match.params.id)}}>\r\n                    Вступить в чат\r\n                </div>\r\n                }\r\n\r\n                \r\n                {this.state.showChatMenu&&<ChatMenu \r\n                    close={()=>{this.setState({showChatMenu:false})}} \r\n                    chatExit={()=>{this.props.chatExit(this.props.match.params.id);\r\n                                   this.props.history.push(\"/chats\") }}\r\n                    isAdmin={this.props.UID==chat.creator}\r\n                    deleteChat={()=>{this.props.deleteChat(this.props.match.params.id)}}\r\n                    >\r\n                </ChatMenu>}\r\n                \r\n                {this.state.forwardMessages&&<ListModal startForward={this.forwardMessages} close={()=>{this.setState({forwardMessages:false})}}>\r\n\r\n                </ListModal>}\r\n                {this.state.showImageModal&&\r\n                    <ImageInputModal \r\n                        close={this.hideImageModal} \r\n                        show={this.state.showImageModal} \r\n                        text={this.inputRef.current.value} \r\n                        initImage={this.state.imageModalInitImage}\r\n                        send={this.sendMessage}>\r\n                    </ImageInputModal>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        sendMessage:(chatId,message,images,replyMessage)=>dispatch(actions.sendMessage(chatId,message,images,replyMessage)),\r\n        deleteMessage:(chatId,messageId)=>dispatch(actions.deleteMessage(chatId,messageId)),\r\n        forwardMessage:(chatId,message)=>dispatch(actions.forwardMessage(chatId,message)),\r\n        getChat:(chatId)=>dispatch(actions.getChat(chatId)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        chatExit:(chatId)=>dispatch(actions.chatExit(chatId)),\r\n        deleteChat:(chatId)=>dispatch(actions.deleteChat(chatId))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Chat))\r\n","import React, { Component } from 'react'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport classes from \"./NoSelectChat.module.css\"\r\nconst NoSelectChat=(props)=> {\r\n    return (\r\n            <div className={classes.NoSelectChat}  >\r\n                <h1 className={classes.Title}>Выберите чат...</h1>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoSelectChat\r\n","import * as paths from \"./utils/consts\"\nimport Auth from \"./Components/Auth/Auth\"\nimport ChatList from \"./Containers/ChatsList/ChatsList\"\nimport Chat from \"./Containers/Chat/Chat\"\nimport NoSelectChat from \"./Components/NoSelectChat/NoSelectChat\"\n\nexport const chatRoutes = [\n    // {\n    //     path:paths.CHAT_LIST,\n    //     Component:ChatList\n        \n    // },\n    // {\n    //     path:paths.NO_SELECT_CHAT,\n    //     Component:NoSelectChat,\n    //     isExact:true\n    // },\n    // {\n    //     path:paths.SELECT_CHAT,\n    //     Component:Chat\n    // },\n]\n\nexport const authRoutes=[\n    {\n        path:paths.EMAIL_AUTH,\n        Component: Auth\n    }\n]","import React, { Component } from 'react'\r\nimport Chat from '../../Containers/Chat/Chat'\r\nimport ChatsList from '../../Containers/ChatsList/ChatsList'\r\nimport * as paths from \"../../utils/consts\"\r\nimport NoSelectChat from \"../NoSelectChat/NoSelectChat\"\r\nimport {Route,Switch} from \"react-router-dom\"\r\nexport default class Chats extends Component {\r\n    render() {\r\n        let isMobile=window.innerWidth<651\r\n        // console.log(\"WIDTH\",width);\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <Switch>\r\n                    {isMobile&&<Route path={paths.SELECT_CHAT}></Route>}\r\n                    <Route path={paths.CHAT_LIST} component={ChatsList}></Route>\r\n                </Switch>\r\n                \r\n                {!isMobile&&<Route exact path={paths.NO_SELECT_CHAT} component={NoSelectChat}></Route>}\r\n                <Route exact path={paths.SELECT_CHAT} render={()=>{\r\n                    return <Chat></Chat>\r\n                }}></Route>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","// import React, { Component } from 'react'\n// import { connect } from 'react-redux'\n\n// export class App extends Component {\n//     componentDidMount(){\n//         console.log(\"APP AUTH\");\n//         this.props.firebase.referense(\"/test\").push({a:1,b:2})\n//     }\n//     render() {\n//         return (\n//             <div>\n                \n//             </div>\n//         )\n//     }\n// }\n\n// const mapStateToProps = (state) => {\n//     return{}\n// }\n\n// const mapDispatchToProps = (dispatch)=> {\n//     return{}    \n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport \"./App.css\"\nimport Auth from \"./Components/Auth/Auth\"\nimport classes from \"./App.module.css\"\nimport SignIn from './Components/Auth/Auth';\nimport {Switch, Route, Redirect} from \"react-router-dom\"\nimport {authRoutes, chatRoutes} from \"./routes\"\nimport Chats from './Components/Chats/Chats'\nimport * as actions from \"./store/index\"\nexport class App extends Component {\n    // componentDidMount(){\n    //     if()\n    //     this.props.subscribeInit()\n\n    // }\n    componentDidMount(){\n        window.addEventListener(\"resize\", ()=>{\n            this.forceUpdate()\n        });\n    }\n    pushInfo=()=>{\n        this.props.database.ref(\"/test\").push({date:Date.now()}).then(response=>{\n            // console.log(\"push info\",response);\n        })\n    }\n    getInfo=()=>{\n        this.props.database.ref(\"/test\").on(\"value\",dataSnapshot=>{\n            // console.log(\"get info\",dataSnapshot.val());\n        })\n    }\n \n\n    \n\n\n    render() {\n    let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);;   \n       \n        return !this.props.UID? (\n            <React.Fragment>\n                <Switch>\n                    {authRoutes.map(({path,Component})=>{\n                        return <Route key={path} path={path} component={Component}></Route>\n                    })}\n                    <Redirect exact to=\"/auth-email\"></Redirect>\n                </Switch>\n            </React.Fragment>\n          \n        ):( \n            <div className={classes.MainWindow} style={{\"height\":height}}>\n     \n                        <Chats></Chats>\n                        <Redirect  from=\"/\" to=\"/chats\"></Redirect>\n\n                    \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        UID:state.auth.UID\n    }\n}\n\nconst mapDispatchToProps =dispatch=> {\n    return {\n        subscribeInit:()=>dispatch(actions.subscribeInit())\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)","import * as actions from \"../actionsConsts\"\r\nconst initState={\r\n    UID:\"isnP8gd3YmM0eQiRM0hIHr2hBhy1\",\r\n    // UID:false,\r\n    isAuth:true,\r\n    loading:false,\r\n    error:null,\r\n    userListeners:[]\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n        case actions.AUTH_START:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n                UID:null,\r\n                error:null\r\n            }\r\n        case actions.AUTH_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:action.UID\r\n            \r\n            }\r\n        case actions.AUTH_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            \r\n            }\r\n        case actions.AUTH_EXIT:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:null,\r\n                error:null\r\n            \r\n            }\r\n        case actions.ADD_FIREBASE_USER_LISTENER:{\r\n            return{\r\n                ...state,\r\n                userListeners:[...state.userListeners,action.ref]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import * as types from \"./actionsConsts\"\r\nconst initState={\r\n   chats:{},\r\n   messages:{},\r\n   userChatsList:[],\r\n   searchChatsList:[],\r\n   users:{}\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n\r\n        case types.SET_USER_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                userChatsList:action.chatsList\r\n            }\r\n        }\r\n        case types.SET_SEARCH_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                searchChatsList:action.chatsList\r\n            }\r\n        }\r\n\r\n\r\n        case types.CHAT_LOADING:{\r\n            return{\r\n                ...state,\r\n                chats:{...state.chats,[action.chatId]:\"LOADING\"}\r\n            }\r\n        }\r\n        case types.CHAT_SUCCESS:\r\n            let prevChats={...state.chats}\r\n            let chatMessagesSuccess={}\r\n            if(prevChats[action.chatId].messages){\r\n                chatMessagesSuccess={...prevChats[action.chatId].messages}\r\n            }\r\n            prevChats[action.chatId]={...action.chatData,messages:chatMessagesSuccess}\r\n            return{\r\n                ...state,\r\n                chats: prevChats\r\n            }\r\n        case types.CHAT_FAIL:\r\n            let prevChats1={...state.chats}\r\n            prevChats1[action.chatId]=\"NOT_EXIST\"\r\n            return{\r\n                ...state,\r\n                chats:prevChats1\r\n            }\r\n        case types.APPEND_CHAT_MESSAGE:\r\n            let chatMessagesAppend={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesAppend={...state.chats[action.chatId].messages,[action.chatMessageId]:action.chatMessage}\r\n            }\r\n            let lastChangeMessagesDate=action.lastChangeMessagesDate\r\n            if(state.chats[action.chatId]&&state.chats[action.chatId].lastChangeMessagesDate>lastChangeMessagesDate){\r\n                lastChangeMessagesDate=state.chats[action.chatId].lastChangeMessagesDate\r\n            }\r\n            \r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesAppend,\r\n                        lastChangeMessagesDate:lastChangeMessagesDate\r\n                    }\r\n                }\r\n            }\r\n            \r\n        case types.REMOVE_CHAT_MESSAGE:\r\n            if(state.chats[action.chatId]==\"NOT_EXIST\"){\r\n                return state\r\n            }\r\n            let chatMessagesRemove={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesRemove={...state.chats[action.chatId].messages}\r\n            }\r\n            delete chatMessagesRemove[action.chatMessageId]\r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesRemove,\r\n                    }\r\n                }\r\n        }\r\n        case types.SET_MESSAGE:\r\n            let messages={...state.messages}\r\n            messages[action.messageId]={...action.messageData}\r\n            return{\r\n                ...state,\r\n                messages:messages\r\n            }\r\n        case types.SET_USER_INFO:\r\n            let userData={}\r\n            if(action.isMainUser){\r\n                userData.public=action.userData\r\n            }else{\r\n                userData={...action.userData}\r\n            }\r\n            return{\r\n                ...state,\r\n                users:{\r\n                    ...state.users,\r\n                    [action.user]:userData\r\n                }\r\n        }\r\n        case types.CLEAN_CHATS_DATA:\r\n            return initState\r\n        \r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport firebase from \"firebase\";\nimport {combineReducers,applyMiddleware,createStore,compose} from \"redux\"\nimport thunk from \"redux-thunk\"\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from \"react-redux\"\nimport authReducer from \"./store/auth/reducer\"\nimport chatsReducer from \"./store/chatsReducer\"\nfirebase.initializeApp({\n    apiKey: \"AIzaSyC2Gf1VqDDnCCth5xGCVbLL6coHBWJoq6Y\",\n    authDomain: \"chat-cc558.firebaseapp.com\",\n    projectId: \"chat-cc558\",\n    storageBucket: \"chat-cc558.appspot.com\",\n    messagingSenderId: \"802123311223\",\n    appId: \"1:802123311223:web:13cd6546011edba6f9fe72\"\n  }\n);\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\n\n\nconst rootReducer = combineReducers({\n    auth:authReducer,\n    chats:chatsReducer\n})\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store=createStore(rootReducer,composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n   \n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3l2yv\",\"Title\":\"Auth_Title__1FXhr\",\"Input\":\"Auth_Input__3bvVA\",\"Button\":\"Auth_Button__23EKZ\",\"IsLogin\":\"Auth_IsLogin__3FivA\",\"Error\":\"Auth_Error__2a8uR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatsList\":\"ChatsList_ChatsList__1wB8U\",\"Navigation\":\"ChatsList_Navigation__3Mlxq\",\"Input\":\"ChatsList_Input__1MLpz\",\"Burger\":\"ChatsList_Burger__DT2vX\",\"ChatsItems\":\"ChatsList_ChatsItems__1kswi\",\"AddWrapper\":\"ChatsList_AddWrapper__2MY7l\",\"Add\":\"ChatsList_Add__3_Fwy\",\"NoSearchChat\":\"ChatsList_NoSearchChat__2pHWo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navigation\":\"Navigation_Navigation__8G14j\",\"ListItem\":\"Navigation_ListItem__JckRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ListModal_wrapper__oDhzB\",\"chat\":\"ListModal_chat__BiTiE\",\"name\":\"ListModal_name__2CzIo\",\"imageWrapper\":\"ListModal_imageWrapper__10K_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImagesWrapper\":\"ImagesBlock_ImagesWrapper__1Mp6x\",\"Image\":\"ImagesBlock_Image__3mjq6\",\"FocusImageWrapper\":\"ImagesBlock_FocusImageWrapper__1_OI3\",\"FocusImage\":\"ImagesBlock_FocusImage__BYiB1\"};"],"sourceRoot":""}