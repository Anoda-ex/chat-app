[{"D:\\Projects\\chat-app-ka\\src\\index.js":"1","D:\\Projects\\chat-app-ka\\src\\App.js":"2","D:\\Projects\\chat-app-ka\\src\\store\\chatsReducer.js":"3","D:\\Projects\\chat-app-ka\\src\\store\\auth\\reducer.js":"4","D:\\Projects\\chat-app-ka\\src\\Date.js":"5","D:\\Projects\\chat-app-ka\\src\\routes.js":"6","D:\\Projects\\chat-app-ka\\src\\store\\actionsConsts.js":"7","D:\\Projects\\chat-app-ka\\src\\Components\\Auth\\Auth.js":"8","D:\\Projects\\chat-app-ka\\src\\Components\\Chats\\Chats.js":"9","D:\\Projects\\chat-app-ka\\src\\utils\\consts.js":"10","D:\\Projects\\chat-app-ka\\src\\Components\\NoSelectChat\\NoSelectChat.js":"11","D:\\Projects\\chat-app-ka\\src\\Containers\\ChatsList\\ChatsList.js":"12","D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\Chat.js":"13","D:\\Projects\\chat-app-ka\\src\\Containers\\ChatsList\\ChatItem\\ChatItem.js":"14","D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\Message\\Message.js":"15","D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\Navigation.js":"16","D:\\Projects\\chat-app-ka\\src\\Containers\\ListModal\\ListModal.js":"17","D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\ImageInputModal\\ImageInputModal.js":"18","D:\\Projects\\chat-app-ka\\src\\Components\\MessageContent\\MessageContent.js":"19","D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\CreateChat\\CreateChat.js":"20","D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\UserSetting\\UserSetting.js":"21","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\ImagesBlock\\ImagesBlock.js":"22","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Modal\\Modal.js":"23","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Background\\Background.js":"24","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Button\\Button.js":"25","D:\\Projects\\chat-app-ka\\src\\store\\index.js":"26","D:\\Projects\\chat-app-ka\\src\\store\\chatsActions.js":"27","D:\\Projects\\chat-app-ka\\src\\store\\auth\\actions.js":"28"},{"size":1197,"mtime":1629858592000,"results":"29","hashOfConfig":"30"},{"size":2555,"mtime":1629860418781,"results":"31","hashOfConfig":"30"},{"size":3878,"mtime":1629858592000,"results":"32","hashOfConfig":"30"},{"size":1044,"mtime":1629858592000,"results":"33","hashOfConfig":"30"},{"size":1485,"mtime":1629858592000,"results":"34","hashOfConfig":"30"},{"size":659,"mtime":1629860428804,"results":"35","hashOfConfig":"30"},{"size":678,"mtime":1629858592000,"results":"36","hashOfConfig":"30"},{"size":1966,"mtime":1629858592000,"results":"37","hashOfConfig":"30"},{"size":1030,"mtime":1629858592000,"results":"38","hashOfConfig":"30"},{"size":195,"mtime":1629858592000,"results":"39","hashOfConfig":"30"},{"size":378,"mtime":1629858592000,"results":"40","hashOfConfig":"30"},{"size":5298,"mtime":1629858592000,"results":"41","hashOfConfig":"30"},{"size":14349,"mtime":1629858592000,"results":"42","hashOfConfig":"30"},{"size":1505,"mtime":1629858592000,"results":"43","hashOfConfig":"30"},{"size":2346,"mtime":1629858592000,"results":"44","hashOfConfig":"30"},{"size":2717,"mtime":1629858592000,"results":"45","hashOfConfig":"30"},{"size":1152,"mtime":1629858592000,"results":"46","hashOfConfig":"30"},{"size":2442,"mtime":1629858592000,"results":"47","hashOfConfig":"30"},{"size":640,"mtime":1629858592000,"results":"48","hashOfConfig":"30"},{"size":2964,"mtime":1629858592000,"results":"49","hashOfConfig":"30"},{"size":2747,"mtime":1629858592000,"results":"50","hashOfConfig":"30"},{"size":2621,"mtime":1629858592000,"results":"51","hashOfConfig":"30"},{"size":715,"mtime":1629858592000,"results":"52","hashOfConfig":"30"},{"size":342,"mtime":1629858592000,"results":"53","hashOfConfig":"30"},{"size":380,"mtime":1629858592000,"results":"54","hashOfConfig":"30"},{"size":62,"mtime":1629860285748,"results":"55","hashOfConfig":"30"},{"size":13250,"mtime":1629858592000,"results":"56","hashOfConfig":"30"},{"size":2311,"mtime":1629858592000,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1etobya",{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\chat-app-ka\\src\\index.js",[],["127","128"],"D:\\Projects\\chat-app-ka\\src\\App.js",["129","130","131","132"],"D:\\Projects\\chat-app-ka\\src\\store\\chatsReducer.js",["133","134"],"import * as types from \"./actionsConsts\"\r\nconst initState={\r\n   chats:{},\r\n   messages:{},\r\n   userChatsList:[],\r\n   searchChatsList:[],\r\n   users:{}\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n\r\n        case types.SET_USER_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                userChatsList:action.chatsList\r\n            }\r\n        }\r\n        case types.SET_SEARCH_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                searchChatsList:action.chatsList\r\n            }\r\n        }\r\n\r\n\r\n        case types.CHAT_LOADING:{\r\n            return{\r\n                ...state,\r\n                chats:{...state.chats,[action.chatId]:\"LOADING\"}\r\n            }\r\n        }\r\n        case types.CHAT_SUCCESS:\r\n            let prevChats={...state.chats}\r\n            let chatMessagesSuccess={}\r\n            if(prevChats[action.chatId].messages){\r\n                chatMessagesSuccess={...prevChats[action.chatId].messages}\r\n            }\r\n            prevChats[action.chatId]={...action.chatData,messages:chatMessagesSuccess}\r\n            return{\r\n                ...state,\r\n                chats: prevChats\r\n            }\r\n        case types.CHAT_FAIL:\r\n            let prevChats1={...state.chats}\r\n            prevChats1[action.chatId]=\"NOT_EXIST\"\r\n            return{\r\n                ...state,\r\n                chats:prevChats1\r\n            }\r\n        case types.APPEND_CHAT_MESSAGE:\r\n            let chatMessagesAppend={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesAppend={...state.chats[action.chatId].messages,[action.chatMessageId]:action.chatMessage}\r\n            }\r\n            let lastChangeMessagesDate=action.lastChangeMessagesDate\r\n            if(state.chats[action.chatId]&&state.chats[action.chatId].lastChangeMessagesDate>lastChangeMessagesDate){\r\n                lastChangeMessagesDate=state.chats[action.chatId].lastChangeMessagesDate\r\n            }\r\n            \r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesAppend,\r\n                        lastChangeMessagesDate:lastChangeMessagesDate\r\n                    }\r\n                }\r\n            }\r\n            \r\n        case types.REMOVE_CHAT_MESSAGE:\r\n            if(state.chats[action.chatId]==\"NOT_EXIST\"){\r\n                return state\r\n            }\r\n            let chatMessagesRemove={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesRemove={...state.chats[action.chatId].messages}\r\n            }\r\n            delete chatMessagesRemove[action.chatMessageId]\r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesRemove,\r\n                    }\r\n                }\r\n        }\r\n        case types.SET_MESSAGE:\r\n            let messages={...state.messages}\r\n            messages[action.messageId]={...action.messageData}\r\n            return{\r\n                ...state,\r\n                messages:messages\r\n            }\r\n        case types.SET_USER_INFO:\r\n            let userData={}\r\n            if(action.isMainUser){\r\n                userData.public=action.userData\r\n            }else{\r\n                userData={...action.userData}\r\n            }\r\n            return{\r\n                ...state,\r\n                users:{\r\n                    ...state.users,\r\n                    [action.user]:userData\r\n                }\r\n        }\r\n        case types.CLEAN_CHATS_DATA:\r\n            return initState\r\n        \r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","D:\\Projects\\chat-app-ka\\src\\store\\auth\\reducer.js",["135"],"import * as actions from \"../actionsConsts\"\r\nconst initState={\r\n    UID:\"isnP8gd3YmM0eQiRM0hIHr2hBhy1\",\r\n    // UID:false,\r\n    isAuth:true,\r\n    loading:false,\r\n    error:null\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n        case actions.AUTH_START:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n                UID:null,\r\n                error:null\r\n            }\r\n        case actions.AUTH_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:action.UID\r\n            \r\n            }\r\n        case actions.AUTH_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            \r\n            }\r\n        case actions.AUTH_EXIT:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:null,\r\n                error:null\r\n            \r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","D:\\Projects\\chat-app-ka\\src\\Date.js",["136","137","138","139"],"const DAYS=[\r\n    'Воскресенье' ,'Понедельник' , 'Вторник' , 'Среда' , 'Четверг' , 'Пятница' , 'Суббота' \r\n]\r\nconst DAYS_S=[\r\n    'вс', 'пн' , 'вт' , 'ср' , 'чт' , 'пт' , 'сб' \r\n]\r\nconst MONTHS=[\r\n\t'январь', 'февраль', 'марть',\r\n\t'апрель', 'маь', 'июнь',\r\n\t'июль', 'августь', 'сентябрь',\r\n\t'октябрь', 'ноябрь', 'декабрь'\r\n]\r\nconst transformNumber=(nubmer)=>{\r\n    let string=nubmer+\"\"\r\n    if(string.length<2){\r\n        return \"0\"+string\r\n    }else{\r\n        return string\r\n    }\r\n\r\n}\r\nexport const getDate=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let res = Date.now()-date\r\n    let dayRes=res/ (24*60*60*1000)\r\n    if(dayRes<1){\r\n        return transformNumber(date.getHours())+\":\"+transformNumber(date.getMinutes())\r\n    }\r\n    if(dayRes<7){\r\n        return DAYS_S[date.getDay()]\r\n    }\r\n    if(dayRes<12){\r\n        let day=date.getDay()+1\r\n        let month=date.getMonth()+1\r\n        let year=date.getFullYear()+\"\"\r\n        year=year.substring(2,4)\r\n        return transformNumber(day)+\".\"+transformNumber(month)+\".\"+year\r\n    }\r\n}\r\n\r\nexport const getDateHM=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let hours=date.getHours()+\"\"\r\n    let minutes=date.getMinutes()+\"\"\r\n    if(hours.length==1){\r\n        hours=\"0\"+hours\r\n    }\r\n    if(minutes.length==1){\r\n        minutes=\"0\"+minutes\r\n    }\r\n    return hours+\":\"+minutes\r\n}\r\n\r\n","D:\\Projects\\chat-app-ka\\src\\routes.js",["140","141","142"],"D:\\Projects\\chat-app-ka\\src\\store\\actionsConsts.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\Auth\\Auth.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\Chats\\Chats.js",[],"D:\\Projects\\chat-app-ka\\src\\utils\\consts.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\NoSelectChat\\NoSelectChat.js",["143","144"],"import React, { Component } from 'react'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport classes from \"./NoSelectChat.module.css\"\r\nconst NoSelectChat=(props)=> {\r\n    return (\r\n            <div className={classes.NoSelectChat}  >\r\n                <h1 className={classes.Title}>Выберите чат...</h1>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoSelectChat\r\n","D:\\Projects\\chat-app-ka\\src\\Containers\\ChatsList\\ChatsList.js",["145","146","147","148"],"import React, { Component } from 'react'\r\nimport classes from \"./ChatsList.module.css\"\r\nimport ChatItem from \"./ChatItem/ChatItem\"\r\nimport * as actions from \"../../store/index\"\r\nimport {connect} from \"react-redux\"\r\nimport {withRouter} from \"react-router-dom\"\r\nimport Navigation from \"../../Components/Navigation/Navigation\"\r\nexport class ChatsList extends Component {\r\n    state={\r\n        showNavigation:false\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.UID && !this.props.users[this.props.UID]){\r\n            this.props.subscribeInit()\r\n\r\n        }\r\n    }\r\n    selectChat=(chatId)=>{\r\n        if(chatId){\r\n\r\n            this.props.history.push(\"/chats/\"+chatId)\r\n        }\r\n    }\r\n    showModal=()=>{\r\n        this.setState({showNavigation:true})\r\n    }\r\n    hideModal=()=>{\r\n        this.setState({showNavigation:false})\r\n    }\r\n    searchRef=React.createRef()\r\n    render() {\r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        let chats=this.props.chats\r\n        let chatsList=this.props.userChatsList\r\n        if(this.searchRef.current?.value){\r\n            if(this.props.searchChatsList.length>0){\r\n                chatsList=this.props.searchChatsList\r\n            }else{\r\n                chatsList=\"NOT_EXIST\"\r\n            }\r\n\r\n        }\r\n        console.log(this.props.searchChatsList,chatsList);\r\n        return (\r\n            <div className={classes.ChatsList}>\r\n                <div className={classes.Navigation}>\r\n                    <div className={classes.Burger} onClick={this.showModal}>\r\n                        <img src=\"/Images/menuBurger.svg\"></img>\r\n                    </div>\r\n                    <div className={classes.Input}><input ref={this.searchRef} onChange={()=>{this.props.test(this.searchRef.current.value)}}></input></div>\r\n                </div>\r\n                <div className={classes.ChatsItems} style={{height:height-50}}>\r\n                    {chatsList!=\"NOT_EXIST\" ? chatsList.sort((key1,key2)=>{\r\n                        let chat1=chats[key1]\r\n                        let chat2=chats[key2]\r\n                        let date1=chat1.lastChangeMessagesDate?chat1.lastChangeMessagesDate:chat1.create\r\n                        let date2=chat2.lastChangeMessagesDate?chat2.lastChangeMessagesDate:chat2.create\r\n                        return date2-date1\r\n                    }).map(chatId=>{\r\n                        let chat=chats[chatId]\r\n                        if(chat==\"NOT_EXIST\"){\r\n                            // this.props.history.replace(\"/chats\")    \r\n                            return null\r\n                        }\r\n                        if(chat==\"LOADING\"){\r\n                            return null\r\n                        }\r\n                        let chatMessages=chat.messages\r\n                        let lastMessage=null\r\n                        if(Object.keys(chatMessages).length>0){\r\n                            let maxTime=-1;\r\n                            Object.values(chatMessages).forEach(chatMessage => {\r\n                                let message=this.props.messages[chatMessage.message]\r\n                                if (message.date>maxTime){\r\n                                    maxTime=message.date\r\n                                    lastMessage=message\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        return <ChatItem \r\n                                    key={chatId} \r\n                                    id={chat.id}\r\n                                    name={chat.name} \r\n                                    avatar={chat.images&&chat.images[Object.keys(chat.images)[Object.keys(chat.images).length-1]]}\r\n                                    chatCreateDate={chat.create}\r\n                                    delete={this.props.deleteChat}\r\n                                    lastMessage={lastMessage}\r\n                                    ></ChatItem>\r\n                    }):<div className={classes.NoSearchChat}>Чатов не найдено</div>}\r\n                  \r\n                </div>\r\n                {/* <div className={classes.AddWrapper}>\r\n                    <div onClick={this.showModal} className={classes.Add}></div>\r\n                </div> */}\r\n                <Navigation show={this.state.showNavigation} close={this.hideModal}></Navigation>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        userChatsList:state.chats.userChatsList,\r\n        searchChatsList:state.chats.searchChatsList,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n        // isUserLoad:state.chats.users[state.auth.UID]\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        // createChat:(name,description,image)=>dispatch(actions.createChat(name,description,image)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        subscribeInit:()=>dispatch(actions.subscribeInit()),\r\n        deleteChat:(chatId)=>dispatch(actions.deleteChat(chatId)),\r\n        test:(search)=>dispatch(actions.test(search))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(ChatsList))\r\n","D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\Chat.js",["149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165"],"import React, { Component } from 'react'\r\nimport classes from \"./Chat.module.css\"\r\nimport Message from \"./Message/Message\"\r\nimport * as actions from \"../../store/index\"\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ListModal from '../ListModal/ListModal';\r\n// import ImageModalInput from \"../../Components/UI/ImageInputModal/ImageInputModal\" \r\nimport ImageInputModal from './ImageInputModal/ImageInputModal';\r\nclass Chat extends Component {\r\n    state={\r\n        selectMessages:[],\r\n        canDeleteMessages:false,\r\n        forwardMessages:false,\r\n        showImageModal:false,\r\n        imageModalInitImage:null,\r\n        replyMessage:null,\r\n    }\r\n    componentDidMount(){\r\n        window.addEventListener(\"resize\", ()=>{\r\n            this.forceUpdate()\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps,state){\r\n        \r\n        if(this.props.match.params.id!=prevProps.match.params.id){\r\n            // this.inputRef.current.focus()\r\n            // this.inputRef.current.value=\"\"\r\n            this.setState({ \r\n                selectMessages:[],\r\n                canDeleteMessages:false,\r\n                forwardMessages:false\r\n            })\r\n            let chat=this.props.chats[this.props.match.params.id]\r\n            if(!chat){\r\n                this.props.getChat(this.props.match.params.id)\r\n            }\r\n            //перерисовываем окно если высота изменилась, например при открывании клавиатуры на телефоне\r\n            window.addEventListener(\"resize\", ()=>{\r\n                this.forceUpdate()\r\n            });\r\n            return \r\n        }\r\n        if(this.props.chats[this.props.match.params.id]?.messages!=prevProps.chats[this.props.match.params.id]?.messages){\r\n            let selectMessages=[...state.selectMessages]\r\n            let chatMessages=this.props.chats[this.props.match.params.id].messages\r\n            let replyMessage=this.state.replyMessage\r\n            if(chatMessages){\r\n                selectMessages=selectMessages.filter(selectMessage=>{\r\n                    return chatMessages[selectMessage]\r\n                })\r\n                if (replyMessage&&!chatMessages[replyMessage.chatMessageId]){\r\n                    replyMessage=false\r\n                }\r\n            }else{\r\n                selectMessages=[]\r\n                replyMessage=false\r\n            }\r\n            this.setState({selectMessages:selectMessages,canDeleteMessages:this.canDeleteMessages(selectMessages),replyMessage:replyMessage})\r\n        }\r\n    }\r\n    sendMessage=(event,text,images)=>{\r\n        if(event){\r\n            this.props.sendMessage(this.props.match.params.id,this.inputRef.current.value,null,this.state.replyMessage)\r\n            \r\n        }else{\r\n            this.props.sendMessage(this.props.match.params.id,text,images,this.state.replyMessage)\r\n        }\r\n        this.inputRef.current.value=\"\"\r\n    }\r\n    getMessageFromChatEntry=(chatMessageId)=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        if(chat.messages[chatMessageId]){\r\n            return this.props.messages[chat.messages[chatMessageId].message]\r\n\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    deleteMessages=()=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        this.state.selectMessages.map(selectMessage=>{\r\n            if(this.state.canDeleteMessages){\r\n                this.props.deleteMessage(this.props.match.params.id,selectMessage)\r\n            }\r\n        })\r\n        this.setState({selectMessages:[]})\r\n    }\r\n    SelectConfig={}\r\n    toggleSelectMessageHandler=(chatMessageId,event)=>{\r\n        // console.log(\"MOUSE UP\",chatMessageId,event);\r\n        if(event.type==\"mousedown\"){\r\n            // console.log(\"MOUSE UP\",chatMessageId,event.timeStamp/1000);\r\n            this.SelectConfig[chatMessageId]=Date.now()\r\n            if(this.state.selectMessages.indexOf(chatMessageId)!=-1){\r\n                this.toggleSelectMessage(chatMessageId)\r\n            }\r\n        }        \r\n        if(event.type==\"mouseup\"){\r\n            if((Date.now()-this.SelectConfig[chatMessageId])/1000>0.2){\r\n                this.toggleSelectMessage(chatMessageId)\r\n                this.SelectConfig[chatMessageId]=0\r\n            }\r\n\r\n        }        \r\n        // console.log(this.SelectConfig);\r\n    }\r\n    toggleSelectMessage=(chatMessageId)=>{\r\n        let selectMessages=[...this.state.selectMessages]\r\n        if(this.state.selectMessages.indexOf(chatMessageId)==-1){\r\n            selectMessages.push(chatMessageId)\r\n        }else{\r\n            selectMessages.splice(selectMessages.indexOf(chatMessageId),1)\r\n        }\r\n        let canDeleteMessages=this.canDeleteMessages(selectMessages)\r\n        this.setState({selectMessages:selectMessages,canDeleteMessages:canDeleteMessages})\r\n    }\r\n    canDeleteMessages=(selectMessages)=>{\r\n        let UID=this.props.UID\r\n        let chatCreator=this.props.chats[this.props.match.params.id].creator\r\n        let canDeleteMessages=true\r\n        if(selectMessages.length<1){\r\n            canDeleteMessages=false\r\n        }else{\r\n            selectMessages.forEach(selectMessage=>{\r\n                canDeleteMessages*= ((UID==chatCreator||UID==this.getMessageFromChatEntry(selectMessage)?.user)&&!!this.props.chats[this.props.match.params.id].messages[selectMessage])\r\n            })\r\n        }\r\n        return !!canDeleteMessages\r\n    }\r\n    showImageModal=()=>{\r\n        this.setState({showImageModal:true})\r\n    }\r\n    hideImageModal=()=>{\r\n        this.setState({showImageModal:false,imageModalInitImage:null})\r\n    }\r\n    chekClipboard=(event)=>{\r\n        if(event.clipboardData.files.length>0){\r\n            \r\n            let file=event.clipboardData.files[0]\r\n            \r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({showImageModal:true,imageModalInitImage:image.target.result})\r\n\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    forwardMessages=(newChatId)=>{\r\n        this.setState({forwardMessages:true})\r\n        \r\n        this.state.selectMessages.forEach(chatMessageId=>{\r\n            this.props.forwardMessage(newChatId,this.getMessageFromChatEntry(chatMessageId))\r\n        })\r\n        this.setState({forwardMessages:false,selectMessages:[]})\r\n        this.props.history.push(\"/chats/\"+newChatId)\r\n    }\r\n  \r\n    inputRef=React.createRef()\r\n    render() {\r\n        //формирование массива сообщений с чата\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n      \r\n        let chatMessages=[]\r\n        if(chat && chat.messages){\r\n            Object.keys(chat.messages).map((messageId,num)=>{\r\n                if(this.props.messages[chat.messages[messageId].message]){\r\n                    let newMessage={...this.getMessageFromChatEntry(messageId),chatMessageId:messageId}\r\n                    chatMessages.push(newMessage)\r\n                \r\n                }\r\n            })\r\n            \r\n        }\r\n        chatMessages.sort((m1,m2)=>{\r\n            return m1.date-m2.date\r\n        })\r\n        //Загрузка\r\n\r\n        if(!chat || chat==\"LOADING\"){\r\n            return  <div className={classes.Chat}>\r\n                        <div className={classes.Status}>Загрузка...</div>\r\n                    </div>\r\n        }\r\n        //Чата не существует\r\n        if(chat==\"NOT_EXIST\"){\r\n            return  <div className={classes.Chat} onClick={()=>{this.props.history.push(\"/chats\")}}>\r\n                        <div className={classes.Status} >Чата не существует или он бы удален</div>\r\n                    </div>\r\n        }\r\n        //обрабока хедера чата\r\n        let headerContent=null\r\n        if(this.state.selectMessages.length<1){\r\n            //Обычный режим\r\n            headerContent=<div className={classes.Header} style={{\"justifyContent\":\"flex-start\"}}>\r\n                <img className={classes.HeaderBackArrow} onClick={()=>{this.props.history.push(\"/chats\")}} src=\"/Images/backArrow.svg\"></img>\r\n                <div className={classes.HeaderName}>{chat.name}</div>\r\n            </div>\r\n        }else{\r\n            //Режим выделенных сообщений\r\n            headerContent=<div className={classes.Header}>\r\n                <div className={classes.HeaderButtonsWrapper}>\r\n                    {this.state.canDeleteMessages&&<button className={classes.HeaderButton} onClick={this.deleteMessages}>\r\n                        Удалить\r\n                    </button>}\r\n                    <button className={classes.HeaderButton} onClick={()=>{this.setState({forwardMessages:true})}}>\r\n                        Переслать\r\n                    </button>\r\n                </div>\r\n                <button className={classes.HeaderButtonCancel} onClick={()=>{this.setState({selectMessages:[]})}}>Отмена</button>\r\n            </div>\r\n        }\r\n    \r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        return (\r\n            <div className={classes.Chat}>\r\n                {headerContent}\r\n                <div className={classes.ChatWindow} style={{\"height\":height-120}}>\r\n                    {chatMessages.map(message=>{\r\n                        return  <Message \r\n                            key={message.id}\r\n                            toggleSelectMessageHandler  ={(event)=>{this.toggleSelectMessageHandler(message.chatMessageId,event)}} \r\n                            select={this.state.selectMessages.indexOf(message.chatMessageId)!=-1}\r\n                            author={message.user==this.props.UID}\r\n                            message={message} \r\n                            onDoubleClick={()=>{this.setState({replyMessage:message})}}\r\n                            replyMessage={this.getMessageFromChatEntry(message.replyChatMessageId)}\r\n                            user={this.props.users[message.user]}\r\n                            forwardUser={message.isForward && this.props.users[message.body.user]}\r\n                            >\r\n                        </Message>\r\n                    })}\r\n                    {this.state.replyMessage&&<div className={classes.ReplyMessagesPadding}></div>}\r\n                </div>\r\n               \r\n                {Object.values(chat.members).indexOf(this.props.UID)>-1\r\n                ?\r\n                <div  className={classes.InputWrapper}>\r\n                    {this.state.replyMessage&&<div className={classes.ReplyWrapper}>\r\n                        <div className={classes.ReplyUser}>{this.state.replyMessage.user}</div>\r\n                        <div className={classes.ReplyMessage}>\r\n                            {this.state.replyMessage.images&&\"Фотография\"}\r\n                            {(this.state.replyMessage.images&&this.state.replyMessage.text)&&\", \"}\r\n                            {this.state.replyMessage.text&&this.state.replyMessage.text}\r\n\r\n                            {this.state.replyMessage.body?.images&&\"Фотография\"}\r\n                            {(this.state.replyMessage.images&&this.state.replyMessage.text)&&\", \"}\r\n                            {this.state.replyMessage.body?.text&&this.state.replyMessage.text}\r\n                        </div>\r\n                        <span className={classes.ReplyCancel} onClick={()=>{this.setState({replyMessage:null})}}>✖</span>\r\n                    </div>}\r\n                    <textarea ref={this.inputRef} className={classes.Input} onPaste={this.chekClipboard}></textarea>\r\n                    <div className={classes.SendIconWrapper} onClick={this.showImageModal}>\r\n                        <img className={classes.SendIcon} src=\"/Images/camera.svg\"></img>\r\n                    </div>\r\n\r\n                    <div className={classes.SendIconWrapper} onClick={this.sendMessage} >\r\n                       \r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className={\"icon icon-tabler icon-tabler-send \"+classes.sendIcon} viewBox=\"0 0 24 24\"  stroke=\"#2c3e50\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                                <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\" />\r\n                                <path d=\"M21 3l-6.5 18a0.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a0.55 .55 0 0 1 0 -1l18 -6.5\" />\r\n                            </svg>\r\n                      \r\n                    </div>    \r\n                </div>\r\n                :\r\n                <div onClick={()=>{this.props.enterToChat(this.props.match.params.id)}}>Вступить в чат</div>}\r\n                \r\n                \r\n                \r\n                {this.state.forwardMessages&&<ListModal startForward={this.forwardMessages} close={()=>{this.setState({forwardMessages:false})}}>\r\n\r\n                </ListModal>}\r\n                {this.state.showImageModal&&\r\n                    <ImageInputModal \r\n                        close={this.hideImageModal} \r\n                        show={this.state.showImageModal} \r\n                        text={this.inputRef.current.value} \r\n                        initImage={this.state.imageModalInitImage}\r\n                        send={this.sendMessage}>\r\n                    </ImageInputModal>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        sendMessage:(chatId,message,images,replyMessage)=>dispatch(actions.sendMessage(chatId,message,images,replyMessage)),\r\n        deleteMessage:(chatId,messageId)=>dispatch(actions.deleteMessage(chatId,messageId)),\r\n        forwardMessage:(chatId,message)=>dispatch(actions.forwardMessage(chatId,message)),\r\n        getChat:(chatId)=>dispatch(actions.getChat(chatId)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Chat))\r\n","D:\\Projects\\chat-app-ka\\src\\Containers\\ChatsList\\ChatItem\\ChatItem.js",["166","167","168"],"import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport { getDate } from '../../../Date'\r\nimport classes from \"./ChatItem.module.css\"\r\n\r\nexport default (props)=> {\r\n  \r\n    return (\r\n        <NavLink to={\"/chats/\"+props.id} className={classes.Link} activeClassName={classes.active}>\r\n            <div className={classes.ChatItem} >\r\n                <div className={classes.Avatar} onClick={()=>{props.delete(props.id)}}>\r\n                    <img className={classes.Avatar} src={props.avatar?props.avatar:\"/Images/noPhoto.jpg\"}></img>\r\n                </div>\r\n                <div className={classes.Wrapper}>\r\n                    <div className={classes.TopWrapper}>\r\n                        <div className={classes.Name}>{props.name}</div>\r\n\r\n                        <div className={classes.LastMessageTime}>\r\n                            {getDate( props.lastMessage?props.lastMessage.date:props.chatCreateDate)}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.BottomWrapper}>\r\n                        {props.lastMessage?\r\n                            <MessageContent message={props.lastMessage}></MessageContent>:\r\n                            <div>Вы создали чат!!!</div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n        \r\n    )\r\n    \r\n}\r\n","D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\Message\\Message.js",["169"],"import React from 'react'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport ImagesBlock from '../../../Components/UI/ImagesBlock/ImagesBlock'\r\nimport { getDateHM } from '../../../Date'\r\nimport classes from \"./Message.module.css\"\r\nfunction Message(props) {\r\n    let style=null\r\n    if(props.author){\r\n        style={\r\n            marginLeft:\"auto\" \r\n        }\r\n    }\r\n  \r\n    let messageData={text:props.message.text,images:props.message.images}\r\n    if(props.message.isForward){\r\n        messageData={text:props.message.body.text,images:props.message.body.images}\r\n    }\r\n\r\n    let wrapperClasses=[classes.Message]\r\n    if(props.author){\r\n        wrapperClasses.push(classes.MessageAuthor)\r\n    }\r\n    if(!!props.images && !props.replyMessage && !props.isForward){\r\n        wrapperClasses.push(classes.MessageWithImages)\r\n    }\r\n    let userName = props?.user?.public?.name?props.user.public.name:props.message.user\r\n    let userForwardName = \"\"\r\n    if(props.forwardUser){\r\n        userForwardName=props.forwardUser?.public?.name ? props.forwardUser.public.name:props.message.body.user\r\n    }\r\n    return (\r\n        \r\n        <div className={classes.MessageWrapper} onMouseDown={props.toggleSelectMessageHandler} onMouseUp={props.toggleSelectMessageHandler} onDoubleClick={props.onDoubleClick}>\r\n            <div className={wrapperClasses.join(\" \")} >\r\n                {props.message.isForward&&<div className={classes.ForwardMessage}>Переслано от {userForwardName}</div>}\r\n                {!props.author&&!props.message.isForward&&<div className={classes.AuthorName}>{userName}</div>}\r\n                {props.replyMessage&&<div className={classes.Reply}>\r\n                    <div className={classes.ReplyUser}>{props.replyMessage.user}</div>  \r\n                    <MessageContent message={props.replyMessage}></MessageContent>\r\n                </div>}\r\n\r\n                {messageData.images&&<ImagesBlock images={messageData.images}></ImagesBlock>}\r\n                \r\n                {messageData.text&&<p  className={classes.MessageText}>{messageData.text}</p>}\r\n                {props.select&&<div className={classes.Select}></div>}\r\n                <div className={classes.Date}>{getDateHM(props.message.date)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\Navigation.js",[],"D:\\Projects\\chat-app-ka\\src\\Containers\\ListModal\\ListModal.js",[],"D:\\Projects\\chat-app-ka\\src\\Containers\\Chat\\ImageInputModal\\ImageInputModal.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\MessageContent\\MessageContent.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\CreateChat\\CreateChat.js",["170"],"import React, { Component,createRef } from 'react'\r\nimport Modal from \"../../../Components/UI/Modal/Modal\"\r\nimport classes from \"./CreateChat.module.css\"\r\nimport Button from \"../../UI/Button/Button\"\r\nexport default class CreateChat extends Component {\r\n    state={\r\n        showImageInputModal:false,\r\n        image:false,\r\n       \r\n    }\r\n    nameRef=createRef()\r\n    descRef=createRef()\r\n    imageInputRef=createRef()\r\n    createChat=()=>{\r\n        this.props.createChat(this.nameRef.current.value,this.descRef.current.value,this.state.image)\r\n    }\r\n    save=(images)=>{\r\n        this.setState({images:images})\r\n    }\r\n    selectFile=(event)=>{\r\n            let file=event.target.files[0]\r\n            if(file){\r\n                let reader  = new FileReader();\r\n                reader.onloadend = (image)=> {\r\n                    if(image.target.result.match(image)){\r\n                        this.setState({image:image.target.result})\r\n\r\n                    }\r\n                }\r\n                reader.readAsDataURL(file)\r\n            }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} close={this.props.hideModal}>\r\n                <div className={classes.AddChat}>\r\n                    <h1 className={classes.Title}>Создать чат</h1>\r\n                    <div className={classes.Wrapper}>\r\n                        <p className={classes.InputName}>Введите имя чата</p>\r\n                        <input  ref={this.nameRef} className={classes.Input}></input>\r\n\r\n                    </div>\r\n                    <div className={classes.Wrapper}>\r\n                        <div className={classes.descImageWrapper}>\r\n                            <p className={classes.InputName}>Введите описание чата</p>\r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.setState({showImageInputModal:true})}}>\r\n                                <img className={classes.Image} onClick={()=>{this.imageInputRef.current.click()}} \r\n                                    src={this.state.image?\r\n                                        this.state.image\r\n                                        :\r\n                                        \"/Images/noPhoto.jpg\"}\r\n                                       >\r\n                                    \r\n                                </img>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" id=\"inputFile\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                        <textarea ref={this.descRef} className={classes.descArea}></textarea>\r\n\r\n                    </div>\r\n                  \r\n                    <Button onClick={this.createChat} >Создать чат</Button>\r\n\r\n                </div>\r\n                   \r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","D:\\Projects\\chat-app-ka\\src\\Components\\Navigation\\UserSetting\\UserSetting.js",["171","172"],"import React, { Component } from 'react'\r\n\r\nimport { connect } from 'react-redux'\r\nimport Button from '../../UI/Button/Button'\r\nimport Modal from '../../UI/Modal/Modal'\r\nimport classes from \"./UserSetting.module.css\"\r\nexport class UserSetting extends Component {\r\n    state={\r\n        imagesModal:false\r\n    }\r\n    NameInputRef=React.createRef()\r\n    componentDidUpdate(){\r\n        // console.log(\"test\",this.props.public);]\r\n      \r\n        if(!!this.props.public&&!!this.NameInputRef.current){\r\n\r\n            this.NameInputRef.current.value=this.props.public.name\r\n        }\r\n    }\r\n    selectFile=(event)=>{\r\n        let file=event.target.files[0]\r\n        if(file){\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({imagesModal:image.target.result})\r\n\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    imageInputRef=React.createRef()\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={this.props.show} close={this.props.hideModal} level={2}>\r\n                    <div className={classes.UserSetting}>\r\n\r\n                   \r\n                        <div className={classes.Title}>Настройки аккаунта</div>\r\n                        <div className={classes.TopWrapper}>\r\n                            \r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.imageInputRef.current.click()}}>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                    \r\n                                <img  src={this.state.imagesModal?this.state.imagesModal:\"/Images/noPhoto.jpg\"}></img>\r\n                            </div>\r\n                            <div className={classes.NameWrapper}>\r\n                                <div className={classes.NameTitle}>Имя пользователя</div>\r\n                                <input ref={this.NameInputRef} className={classes.NameInput}></input>\r\n                                {/* <div className={classes.IdWrapper}>\r\n                                    {this.props.UID}\r\n                                </div> */}\r\n                            </div>\r\n                        </div>\r\n                        <Button className={classes.SaveButton} onClick={()=>{this.props.save(\"images\",this.NameInputRef.current.value)}}>Сохранить изминения</Button>\r\n                    </div>\r\n                </Modal>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default UserSetting\r\n","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\ImagesBlock\\ImagesBlock.js",["173","174","175"],"import React from 'react'\r\nimport Background from '../Background/Background'\r\nimport Modal from '../Modal/Modal'\r\nimport classes from \"./ImagesBlock.module.css\"\r\nexport default class ImagesBlock extends React.Component {\r\n    state={\r\n        focusImage:-1\r\n    }\r\n    getImageWidth=(imagesCount,number)=>{\r\n        let imageWidthTable={\r\n            0:[0],\r\n            1:[100],\r\n            2:[100,100],\r\n            3:[100,50,50],\r\n            4:[100,100/3,100/3,100/3],\r\n            5:[100,50,50,50,50],\r\n            6:[100,50,50,100/3,100/3,100/3],\r\n            7:[100,100/3,100/3,100/3,100/3,100/3,100/3],\r\n            8:[50,50,50,50,50,50,50,50],\r\n            9:[50,50,50,50,50,50,100/3,100/3,100/3],\r\n            10:[50,50,50,50,100/3,100/3,100/3,100/3,100/3,100/3]\r\n        }   \r\n        return imageWidthTable[imagesCount][number]\r\n    }\r\n    changeFocusImage=(event,imageIndex)=>{\r\n        let focusImageIndex=this.state.focusImage\r\n        let countOfImages=this.props.images.length\r\n        // // let \r\n        // console.log(event.nativeEvent.wheelDelta,focusImageIndex,);\r\n        if(event.nativeEvent.wheelDelta<    0){\r\n            // 10 фоток\r\n            // 9 индекс\r\n            if(focusImageIndex>=countOfImages-1){\r\n                focusImageIndex=0\r\n            }else{\r\n                focusImageIndex=focusImageIndex+1\r\n            }\r\n        }else{\r\n            if(focusImageIndex<=0){\r\n                focusImageIndex=countOfImages-1\r\n            }else{\r\n                focusImageIndex=focusImageIndex-1\r\n            }\r\n        }\r\n        this.setState({focusImage:focusImageIndex})\r\n    }\r\n    render(){\r\n\r\n        return (\r\n            <div className={classes.ImagesWrapper}>\r\n                        {this.props.images.map((image,num)=>{\r\n                            return <div key={num}  style={{\r\n                                width:this.getImageWidth(this.props.images.length,num)+\"%\"\r\n                            }}>\r\n                                <img src={image} className={classes.Image} onClick={()=>{this.setState({focusImage:num})}}></img>\r\n                            </div>\r\n                        })}\r\n\r\n                        {this.state.focusImage>-1 && <React.Fragment>\r\n                            <img className={classes.FocusImage} src={this.props.images[this.state.focusImage]} onClick={()=>{this.setState({focusImage:-1})}} onWheel={this.changeFocusImage}></img>\r\n                            <Background close={()=>{this.setState({focusImage:-1})}}></Background>   \r\n                        </React.Fragment>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Modal\\Modal.js",["176","177"],"import React, { Component } from 'react'\r\nimport Background from '../Background/Background'\r\nimport classes from \"./Modal.module.css\"\r\nexport default (props)=> {\r\n        let style={}\r\n        if(!props.show){\r\n            return null\r\n        }\r\n        if(props.noPadding){\r\n            style.padding=0\r\n            \r\n        }\r\n        let level=props.level?props.level:1\r\n        style.zIndex=level*101\r\n        return (\r\n            <React.Fragment>\r\n                <Background close={props.close} level={props.level}></Background>\r\n                <div className={classes.Modal} style={style}>\r\n                    {props.children}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    \r\n}\r\n","D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Background\\Background.js",[],"D:\\Projects\\chat-app-ka\\src\\Components\\UI\\Button\\Button.js",[],"D:\\Projects\\chat-app-ka\\src\\store\\index.js",[],"D:\\Projects\\chat-app-ka\\src\\store\\chatsActions.js",["178","179","180","181"],"D:\\Projects\\chat-app-ka\\src\\store\\auth\\actions.js",["182","183"],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":32,"column":8,"nodeType":"190","messageId":"191","endLine":32,"endColumn":12},{"ruleId":"188","severity":1,"message":"192","line":34,"column":8,"nodeType":"190","messageId":"191","endLine":34,"endColumn":14},{"ruleId":"188","severity":1,"message":"193","line":36,"column":21,"nodeType":"190","messageId":"191","endLine":36,"endColumn":31},{"ruleId":"188","severity":1,"message":"194","line":39,"column":10,"nodeType":"190","messageId":"191","endLine":39,"endColumn":17},{"ruleId":"195","severity":1,"message":"196","line":9,"column":1,"nodeType":"197","endLine":120,"endColumn":2},{"ruleId":"198","severity":1,"message":"199","line":73,"column":42,"nodeType":"200","messageId":"201","endLine":73,"endColumn":44},{"ruleId":"195","severity":1,"message":"196","line":9,"column":1,"nodeType":"197","endLine":45,"endColumn":2},{"ruleId":"188","severity":1,"message":"202","line":1,"column":7,"nodeType":"190","messageId":"191","endLine":1,"endColumn":11},{"ruleId":"188","severity":1,"message":"203","line":7,"column":7,"nodeType":"190","messageId":"191","endLine":7,"endColumn":13},{"ruleId":"198","severity":1,"message":"199","line":47,"column":20,"nodeType":"200","messageId":"201","endLine":47,"endColumn":22},{"ruleId":"198","severity":1,"message":"199","line":50,"column":22,"nodeType":"200","messageId":"201","endLine":50,"endColumn":24},{"ruleId":"188","severity":1,"message":"204","line":3,"column":8,"nodeType":"190","messageId":"191","endLine":3,"endColumn":16},{"ruleId":"188","severity":1,"message":"205","line":4,"column":8,"nodeType":"190","messageId":"191","endLine":4,"endColumn":12},{"ruleId":"188","severity":1,"message":"206","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":20},{"ruleId":"188","severity":1,"message":"207","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":26},{"ruleId":"188","severity":1,"message":"208","line":2,"column":9,"nodeType":"190","messageId":"191","endLine":2,"endColumn":19},{"ruleId":"209","severity":1,"message":"210","line":48,"column":25,"nodeType":"211","endLine":48,"endColumn":59},{"ruleId":"198","severity":1,"message":"212","line":53,"column":31,"nodeType":"200","messageId":"201","endLine":53,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":61,"column":32,"nodeType":"200","messageId":"201","endLine":61,"endColumn":34},{"ruleId":"198","severity":1,"message":"199","line":65,"column":32,"nodeType":"200","messageId":"201","endLine":65,"endColumn":34},{"ruleId":"198","severity":1,"message":"212","line":26,"column":38,"nodeType":"200","messageId":"201","endLine":26,"endColumn":40},{"ruleId":"198","severity":1,"message":"212","line":44,"column":66,"nodeType":"200","messageId":"201","endLine":44,"endColumn":68},{"ruleId":"188","severity":1,"message":"213","line":81,"column":13,"nodeType":"190","messageId":"191","endLine":81,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":82,"column":52,"nodeType":"216","messageId":"217","endLine":82,"endColumn":54},{"ruleId":"198","severity":1,"message":"199","line":92,"column":22,"nodeType":"200","messageId":"201","endLine":92,"endColumn":24},{"ruleId":"198","severity":1,"message":"212","line":95,"column":64,"nodeType":"200","messageId":"201","endLine":95,"endColumn":66},{"ruleId":"198","severity":1,"message":"199","line":99,"column":22,"nodeType":"200","messageId":"201","endLine":99,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":110,"column":60,"nodeType":"200","messageId":"201","endLine":110,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":126,"column":42,"nodeType":"200","messageId":"201","endLine":126,"endColumn":44},{"ruleId":"198","severity":1,"message":"199","line":126,"column":60,"nodeType":"200","messageId":"201","endLine":126,"endColumn":62},{"ruleId":"214","severity":1,"message":"215","line":169,"column":59,"nodeType":"216","messageId":"217","endLine":169,"endColumn":61},{"ruleId":"198","severity":1,"message":"199","line":183,"column":25,"nodeType":"200","messageId":"201","endLine":183,"endColumn":27},{"ruleId":"198","severity":1,"message":"199","line":189,"column":16,"nodeType":"200","messageId":"201","endLine":189,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":199,"column":17,"nodeType":"211","endLine":199,"endColumn":136},{"ruleId":"198","severity":1,"message":"212","line":226,"column":93,"nodeType":"200","messageId":"201","endLine":226,"endColumn":95},{"ruleId":"198","severity":1,"message":"199","line":227,"column":49,"nodeType":"200","messageId":"201","endLine":227,"endColumn":51},{"ruleId":"209","severity":1,"message":"210","line":257,"column":25,"nodeType":"211","endLine":257,"endColumn":84},{"ruleId":"188","severity":1,"message":"207","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":7,"column":1,"nodeType":"197","endLine":35,"endColumn":2},{"ruleId":"209","severity":1,"message":"210","line":13,"column":21,"nodeType":"211","endLine":13,"endColumn":107},{"ruleId":"188","severity":1,"message":"218","line":9,"column":9,"nodeType":"190","messageId":"191","endLine":9,"endColumn":14},{"ruleId":"209","severity":1,"message":"210","line":47,"column":33,"nodeType":"211","endLine":52,"endColumn":41},{"ruleId":"188","severity":1,"message":"219","line":3,"column":10,"nodeType":"190","messageId":"191","endLine":3,"endColumn":17},{"ruleId":"209","severity":1,"message":"210","line":47,"column":33,"nodeType":"211","endLine":47,"endColumn":113},{"ruleId":"188","severity":1,"message":"220","line":3,"column":8,"nodeType":"190","messageId":"191","endLine":3,"endColumn":13},{"ruleId":"209","severity":1,"message":"210","line":55,"column":33,"nodeType":"211","endLine":55,"endColumn":124},{"ruleId":"209","severity":1,"message":"210","line":60,"column":29,"nodeType":"211","endLine":60,"endColumn":191},{"ruleId":"188","severity":1,"message":"207","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":4,"column":1,"nodeType":"197","endLine":24,"endColumn":2},{"ruleId":"188","severity":1,"message":"221","line":1,"column":10,"nodeType":"190","messageId":"191","endLine":1,"endColumn":16},{"ruleId":"198","severity":1,"message":"199","line":203,"column":16,"nodeType":"200","messageId":"201","endLine":203,"endColumn":18},{"ruleId":"198","severity":1,"message":"199","line":218,"column":16,"nodeType":"200","messageId":"201","endLine":218,"endColumn":18},{"ruleId":"188","severity":1,"message":"222","line":310,"column":13,"nodeType":"190","messageId":"191","endLine":310,"endColumn":16},{"ruleId":"188","severity":1,"message":"223","line":35,"column":21,"nodeType":"190","messageId":"191","endLine":35,"endColumn":30},{"ruleId":"188","severity":1,"message":"223","line":53,"column":21,"nodeType":"190","messageId":"191","endLine":53,"endColumn":30},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","'SignIn' is defined but never used.","'chatRoutes' is defined but never used.","'getDate' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DAYS' is assigned a value but never used.","'MONTHS' is assigned a value but never used.","'ChatList' is defined but never used.","'Chat' is defined but never used.","'NoSelectChat' is defined but never used.","'Component' is defined but never used.","'withRouter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'chat' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'style' is assigned a value but never used.","'connect' is defined but never used.","'Modal' is defined but never used.","'logDOM' is defined but never used.","'UID' is assigned a value but never used.","'errorCode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]