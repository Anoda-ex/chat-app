[{"D:\\Projects\\chat-app-main\\src\\index.js":"1","D:\\Projects\\chat-app-main\\src\\App.js":"2","D:\\Projects\\chat-app-main\\src\\store\\auth\\reducer.js":"3","D:\\Projects\\chat-app-main\\src\\store\\index.js":"4","D:\\Projects\\chat-app-main\\src\\routes.js":"5","D:\\Projects\\chat-app-main\\src\\store\\actionsConsts.js":"6","D:\\Projects\\chat-app-main\\src\\Components\\Chats\\Chats.js":"7","D:\\Projects\\chat-app-main\\src\\Components\\Auth\\Auth.js":"8","D:\\Projects\\chat-app-main\\src\\store\\auth\\actions.js":"9","D:\\Projects\\chat-app-main\\src\\Components\\NoSelectChat\\NoSelectChat.js":"10","D:\\Projects\\chat-app-main\\src\\utils\\consts.js":"11","D:\\Projects\\chat-app-main\\src\\Containers\\ChatsList\\ChatsList.js":"12","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\Chat.js":"13","D:\\Projects\\chat-app-main\\src\\Containers\\ChatsList\\ChatItem\\ChatItem.js":"14","D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\Navigation.js":"15","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\Message\\Message.js":"16","D:\\Projects\\chat-app-main\\src\\Containers\\ListModal\\ListModal.js":"17","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\ImageInputModal\\ImageInputModal.js":"18","D:\\Projects\\chat-app-main\\src\\Components\\MessageContent\\MessageContent.js":"19","D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\CreateChat\\CreateChat.js":"20","D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\UserSetting\\UserSetting.js":"21","D:\\Projects\\chat-app-main\\src\\Components\\UI\\ImagesBlock\\ImagesBlock.js":"22","D:\\Projects\\chat-app-main\\src\\Components\\UI\\Background\\Background.js":"23","D:\\Projects\\chat-app-main\\src\\Components\\UI\\Modal\\Modal.js":"24","D:\\Projects\\chat-app-main\\src\\Components\\UI\\Button\\Button.js":"25","D:\\Projects\\chat-app-main\\src\\scripts\\Date.js":"26","D:\\Projects\\chat-app-main\\src\\scripts\\getName.js":"27","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\ChatMenu\\ChatMenu.js":"28","D:\\Projects\\chat-app-main\\src\\store\\chats\\actions.js":"29","D:\\Projects\\chat-app-main\\src\\store\\chats\\reducer.js":"30"},{"size":1127,"mtime":1630523280733,"results":"31","hashOfConfig":"32"},{"size":2369,"mtime":1630523017281,"results":"33","hashOfConfig":"32"},{"size":1260,"mtime":1629950277279,"results":"34","hashOfConfig":"32"},{"size":63,"mtime":1630523143410,"results":"35","hashOfConfig":"32"},{"size":659,"mtime":1629860428804,"results":"36","hashOfConfig":"32"},{"size":750,"mtime":1630522518125,"results":"37","hashOfConfig":"32"},{"size":970,"mtime":1630522211206,"results":"38","hashOfConfig":"32"},{"size":1814,"mtime":1630522189018,"results":"39","hashOfConfig":"32"},{"size":2506,"mtime":1630522489457,"results":"40","hashOfConfig":"32"},{"size":378,"mtime":1629858592000,"results":"41","hashOfConfig":"32"},{"size":195,"mtime":1629858592000,"results":"42","hashOfConfig":"32"},{"size":4901,"mtime":1630573887844,"results":"43","hashOfConfig":"32"},{"size":14384,"mtime":1631093345132,"results":"44","hashOfConfig":"32"},{"size":1474,"mtime":1630523433416,"results":"45","hashOfConfig":"32"},{"size":2717,"mtime":1629858592000,"results":"46","hashOfConfig":"32"},{"size":2227,"mtime":1630522740263,"results":"47","hashOfConfig":"32"},{"size":1048,"mtime":1630522463565,"results":"48","hashOfConfig":"32"},{"size":2423,"mtime":1630522665280,"results":"49","hashOfConfig":"32"},{"size":779,"mtime":1629940902169,"results":"50","hashOfConfig":"32"},{"size":2962,"mtime":1631091664061,"results":"51","hashOfConfig":"32"},{"size":2545,"mtime":1630571243278,"results":"52","hashOfConfig":"32"},{"size":3057,"mtime":1630522382168,"results":"53","hashOfConfig":"32"},{"size":318,"mtime":1630522341980,"results":"54","hashOfConfig":"32"},{"size":802,"mtime":1631098042909,"results":"55","hashOfConfig":"32"},{"size":452,"mtime":1630581042473,"results":"56","hashOfConfig":"32"},{"size":1485,"mtime":1629920921381,"results":"57","hashOfConfig":"32"},{"size":174,"mtime":1629922942239,"results":"58","hashOfConfig":"32"},{"size":3765,"mtime":1631277675798,"results":"59","hashOfConfig":"32"},{"size":15642,"mtime":1631097942799,"results":"60","hashOfConfig":"32"},{"size":3879,"mtime":1630523295461,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"b7uzzd",{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"64"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"64"},"D:\\Projects\\chat-app-main\\src\\index.js",[],["140","141"],"D:\\Projects\\chat-app-main\\src\\App.js",["142","143"],"\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport \"./App.css\"\nimport classes from \"./App.module.css\"\nimport {Switch, Route, Redirect} from \"react-router-dom\"\nimport {authRoutes, chatRoutes} from \"./routes\"\nimport Chats from './Components/Chats/Chats'\nimport * as actions from \"./store/index\"\nimport firebase from \"firebase\"\nexport class App extends Component {\n    componentDidMount(){\n        window.addEventListener(\"resize\", ()=>{\n            this.forceUpdate()\n        });\n        firebase.auth().onAuthStateChanged((user) => {\n            \n            if(user){\n                this.props.initUserSignin(user)\n            }else(\n                this.props.initUserSignin(null)\n            )\n        });\n    }\n    pushInfo=()=>{\n        this.props.database.ref(\"/test\").push({date:Date.now()}).then(response=>{\n        })\n    }\n    getInfo=()=>{\n        this.props.database.ref(\"/test\").on(\"value\",dataSnapshot=>{\n        })\n    }\n \n\n    \n\n\n    render() {\n    let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);;   \n        if(this.props.UID==\"INIT\"){\n            return<div className={classes.Loading}>Загрузка...</div>\n        }else{\n            if(!this.props.UID){\n                return (\n                    <React.Fragment>\n                        <Switch>\n                            {authRoutes.map(({path,Component})=>{\n                                return <Route key={path} path={path} component={Component}></Route>\n                            })}\n                            <Redirect exact to=\"/auth-email\"></Redirect>\n                        </Switch>\n                    </React.Fragment>\n                )\n            }\n            if(this.props.UID){\n                return( \n                    <div className={classes.MainWindow} style={{\"height\":height}}>\n                        <Chats></Chats>\n                        <Redirect  from=\"/\" to=\"/chats\"></Redirect>\n                    </div>\n                )\n            }\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        UID:state.auth.UID,\n        authLoading:state.auth.loading\n    }\n}\n\nconst mapDispatchToProps =dispatch=> {\n    return {\n        initUserSignin:(user)=>dispatch(actions.initUserSignin(user))\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)","D:\\Projects\\chat-app-main\\src\\store\\auth\\reducer.js",["144"],"import * as actions from \"../actionsConsts\"\r\nconst initState={\r\n    // UID:\"isnP8gd3YmM0eQiRM0hIHr2hBhy1\",\r\n    UID:\"INIT\",\r\n    isAuth:true,\r\n    loading:false,\r\n    error:null,\r\n    userListeners:[]\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n        case actions.AUTH_START:\r\n            return{\r\n                ...state,\r\n                loading:true,\r\n                UID:null,\r\n                error:null\r\n            }\r\n        case actions.AUTH_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:action.UID\r\n            \r\n            }\r\n        case actions.AUTH_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                error:action.error\r\n            \r\n            }\r\n        case actions.AUTH_EXIT:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                UID:null,\r\n                error:null\r\n            \r\n            }\r\n        case actions.ADD_FIREBASE_USER_LISTENER:{\r\n            return{\r\n                ...state,\r\n                userListeners:[...state.userListeners,action.ref]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","D:\\Projects\\chat-app-main\\src\\store\\index.js",[],"D:\\Projects\\chat-app-main\\src\\routes.js",["145","146","147"],"import * as paths from \"./utils/consts\"\nimport Auth from \"./Components/Auth/Auth\"\nimport ChatList from \"./Containers/ChatsList/ChatsList\"\nimport Chat from \"./Containers/Chat/Chat\"\nimport NoSelectChat from \"./Components/NoSelectChat/NoSelectChat\"\n\nexport const chatRoutes = [\n    // {\n    //     path:paths.CHAT_LIST,\n    //     Component:ChatList\n        \n    // },\n    // {\n    //     path:paths.NO_SELECT_CHAT,\n    //     Component:NoSelectChat,\n    //     isExact:true\n    // },\n    // {\n    //     path:paths.SELECT_CHAT,\n    //     Component:Chat\n    // },\n]\n\nexport const authRoutes=[\n    {\n        path:paths.EMAIL_AUTH,\n        Component: Auth\n    }\n]","D:\\Projects\\chat-app-main\\src\\store\\actionsConsts.js",[],"D:\\Projects\\chat-app-main\\src\\Components\\Chats\\Chats.js",[],"D:\\Projects\\chat-app-main\\src\\Components\\Auth\\Auth.js",[],"D:\\Projects\\chat-app-main\\src\\store\\auth\\actions.js",["148","149"],"import * as types from \"../actionsConsts\"\r\nimport firebase from \"firebase\"\r\n\r\nexport const auth =(email,password,isLogin)=>{\r\n    return (dispatch)=>{\r\n        dispatch({\r\n            type:types.AUTH_START\r\n        })\r\n        if(isLogin){\r\n            firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                dispatch({\r\n                    type:types.AUTH_SUCCESS,\r\n                    UID:userCredential.user.uid\r\n                })\r\n                \r\n            })\r\n            .catch((error) => {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                console.log(errorMessage);\r\n                dispatch({\r\n                    type:types.AUTH_FAIL,\r\n                    error:errorMessage\r\n                })\r\n            });\r\n        }\r\n        else{\r\n            firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                dispatch({\r\n                    type:types.AUTH_SUCCESS,\r\n                    UID:userCredential.user.uid\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                var errorCode = error.code;\r\n                var errorMessage = error.message;\r\n                dispatch({\r\n                    type:types.AUTH_FAIL,\r\n                    error:errorMessage\r\n                })\r\n            });\r\n        }\r\n    }\r\n} \r\nexport const initUserSignin=(user)=>{\r\n    return (dispatch)=>{\r\n        if(user){\r\n            dispatch({\r\n                type:types.AUTH_SUCCESS,\r\n                UID:user.uid\r\n            })\r\n        }else{\r\n            dispatch({\r\n                type:types.AUTH_SUCCESS,\r\n                UID:null\r\n            })\r\n        }\r\n    }   \r\n}\r\nexport const changeUserSetting=(images=null,name=null)=>{\r\n    return (dispatch,state)=>{\r\n        if(images){\r\n            firebase.database().ref(\"users/\"+state().auth.UID+\"/public/images\").set(images)\r\n        }\r\n        if(name){\r\n            firebase.database().ref(\"users/\"+state().auth.UID+\"/public/name\").set(name)\r\n        }\r\n    }\r\n}\r\nexport const userExit=()=>{\r\n    return(dispatch,state)=>{\r\n        firebase.auth().signOut()\r\n        dispatch({\r\n            type:types.AUTH_EXIT\r\n        })\r\n        dispatch({\r\n            type:types.CLEAN_CHATS_DATA\r\n        })\r\n        state().auth.userListeners.forEach(path => {\r\n            firebase.database().ref(path).off()\r\n        });\r\n    }\r\n}\r\n\r\n","D:\\Projects\\chat-app-main\\src\\Components\\NoSelectChat\\NoSelectChat.js",["150","151"],"import React, { Component } from 'react'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport classes from \"./NoSelectChat.module.css\"\r\nconst NoSelectChat=(props)=> {\r\n    return (\r\n            <div className={classes.NoSelectChat}  >\r\n                <h1 className={classes.Title}>Выберите чат...</h1>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoSelectChat\r\n","D:\\Projects\\chat-app-main\\src\\utils\\consts.js",[],"D:\\Projects\\chat-app-main\\src\\Containers\\ChatsList\\ChatsList.js",["152","153","154","155"],"import React, { Component } from 'react'\r\nimport classes from \"./ChatsList.module.css\"\r\nimport ChatItem from \"./ChatItem/ChatItem\"\r\nimport * as actions from \"../../store/index\"\r\nimport {connect} from \"react-redux\"\r\nimport {withRouter} from \"react-router-dom\"\r\nimport Navigation from \"../../Components/Navigation/Navigation\"\r\nexport class ChatsList extends Component {\r\n    state={\r\n        showNavigation:false\r\n    }\r\n    componentDidMount(){\r\n        if(this.props.UID && !this.props.users[this.props.UID]){\r\n            this.props.subscribeInit()\r\n\r\n        }\r\n    }\r\n    selectChat=(chatId)=>{\r\n        if(chatId){\r\n\r\n            this.props.history.push(\"/chats/\"+chatId)\r\n        }\r\n    }\r\n    showModal=()=>{\r\n        this.setState({showNavigation:true})\r\n    }\r\n    hideModal=()=>{\r\n        this.setState({showNavigation:false})\r\n    }\r\n    searchRef=React.createRef()\r\n    render() {\r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        let chats=this.props.chats\r\n        let chatsList=this.props.userChatsList\r\n        let chatsListMode=\"USER_CHATS_LIST\"\r\n        if(this.searchRef.current?.value){\r\n            chatsList=this.props.searchChatsList\r\n            chatsListMode=\"SEARCH_CHATS_LIST\"\r\n        }\r\n        return (\r\n            <div className={classes.ChatsList}>\r\n                <div className={classes.Navigation}>\r\n                    <div className={classes.Burger} onClick={this.showModal}>\r\n                        <img src=\"/Images/menuBurger.svg\"></img>\r\n                    </div>\r\n                    <div className={classes.Input}>\r\n                        <input ref={this.searchRef} placeholder=\"Поиск чатов\" onChange={()=>{this.props.search(this.searchRef.current.value)}}></input>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.ChatsItems} style={{height:height-50}}>\r\n                    {chatsList.length>0 ? chatsList.sort((key1,key2)=>{\r\n                        let chat1=chats[key1]\r\n                        let chat2=chats[key2]\r\n                        let date1=chat1.lastChangeMessagesDate?chat1.lastChangeMessagesDate:chat1.create\r\n                        let date2=chat2.lastChangeMessagesDate?chat2.lastChangeMessagesDate:chat2.create\r\n                        return date2-date1\r\n                    }).map(chatId=>{\r\n                        let chat=chats[chatId]\r\n                        if(chat==\"NOT_EXIST\"){\r\n                            return null\r\n                        }\r\n                        if(chat==\"LOADING\"){\r\n                            return null\r\n                        }\r\n                        let chatMessages=chat.messages\r\n                        let lastMessage=null\r\n                        if(Object.keys(chatMessages).length>0){\r\n                            let maxTime=-1;\r\n                            Object.values(chatMessages).forEach(chatMessage => {\r\n                                let message=this.props.messages[chatMessage.message]\r\n                                if (message.date>maxTime){\r\n                                    maxTime=message.date\r\n                                    lastMessage=message\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        return <ChatItem \r\n                                    key={chatId} \r\n                                    id={chat.id}\r\n                                    name={chat.name} \r\n                                    avatar={chat.images&&chat.images[Object.keys(chat.images)[Object.keys(chat.images).length-1]]}\r\n                                    chatCreateDate={chat.create}\r\n                                    lastMessage={lastMessage}\r\n                                    ></ChatItem>\r\n                    }):<div className={classes.NoSearchChat}>{chatsListMode==\"USER_CHATS_LIST\"?\"У вас еще нет чатов\":\"Чатов не найдено\"}</div>}\r\n                  \r\n                </div>\r\n            \r\n                <Navigation show={this.state.showNavigation} close={this.hideModal}></Navigation>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        userChatsList:state.chats.userChatsList,\r\n        searchChatsList:state.chats.searchChatsList,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        subscribeInit:()=>dispatch(actions.subscribeInit()),\r\n        deleteChat:(chatId)=>dispatch(actions.deleteChat(chatId)),\r\n        search:(search)=>dispatch(actions.search(search))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(ChatsList))\r\n","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\Chat.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"import React, { Component } from 'react'\r\nimport classes from \"./Chat.module.css\"\r\nimport Message from \"./Message/Message\"\r\nimport * as actions from \"../../store/index\"\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ListModal from '../ListModal/ListModal';\r\nimport ImageInputModal from './ImageInputModal/ImageInputModal';\r\nimport MessageContent from '../../Components/MessageContent/MessageContent';\r\nimport ChatMenu from './ChatMenu/ChatMenu';\r\nclass Chat extends Component {\r\n    state={\r\n        selectMessages:[],\r\n        canDeleteMessages:false,\r\n        forwardMessages:null,\r\n        showImageModal:false,\r\n        imageModalInitImage:null,\r\n        replyMessage:null,\r\n        showChatMenu:false\r\n    }\r\n\r\n    componentDidUpdate(prevProps,state){\r\n        if(this.props.match.params.id!=prevProps.match.params.id){\r\n            this.setState({ \r\n                selectMessages:[],\r\n                canDeleteMessages:false,\r\n                forwardMessages:false,\r\n                replyMessage:false\r\n            })\r\n            let chat=this.props.chats[this.props.match.params.id]\r\n            if(!chat){\r\n                this.props.getChat(this.props.match.params.id)\r\n            }\r\n\r\n            return \r\n        }\r\n        if(this.props.chats[this.props.match.params.id]?.messages!=prevProps.chats[this.props.match.params.id]?.messages){\r\n            let selectMessages=[...state.selectMessages]\r\n            let chatMessages=this.props.chats[this.props.match.params.id].messages\r\n            let replyMessage=this.state.replyMessage\r\n            if(chatMessages){\r\n                selectMessages=selectMessages.filter(selectMessage=>{\r\n                    return chatMessages[selectMessage]\r\n                })\r\n                if (replyMessage&&!chatMessages[replyMessage.chatMessageId]){\r\n                    replyMessage=false\r\n                }\r\n            }else{\r\n                selectMessages=[]\r\n                replyMessage=false\r\n            }\r\n            this.setState({selectMessages:selectMessages,canDeleteMessages:this.canDeleteMessages(selectMessages),replyMessage:replyMessage})\r\n        }\r\n    }\r\n    sendMessage=(event,text,images)=>{\r\n        if(event){\r\n            this.props.sendMessage(this.props.match.params.id,this.inputRef.current.value,[],this.state.replyMessage)\r\n            \r\n        }else{\r\n            this.props.sendMessage(this.props.match.params.id,text,images,this.state.replyMessage)\r\n        }\r\n        this.inputRef.current.value=\"\"\r\n    }\r\n    getMessageFromChatEntry=(chatMessageId)=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        if(chat.messages[chatMessageId]){\r\n            return this.props.messages[chat.messages[chatMessageId].message]\r\n\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    deleteMessages=()=>{\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        this.state.selectMessages.map(selectMessage=>{\r\n            if(this.state.canDeleteMessages){\r\n                this.props.deleteMessage(this.props.match.params.id,selectMessage)\r\n            }\r\n        })\r\n        this.setState({selectMessages:[]})\r\n    }\r\n    SelectConfig={}\r\n    toggleSelectMessageHandler=(chatMessageId,event)=>{\r\n        if(event.type==\"mousedown\"){\r\n            this.SelectConfig[chatMessageId]=Date.now()\r\n            if(this.state.selectMessages.indexOf(chatMessageId)!=-1){\r\n                this.toggleSelectMessage(chatMessageId)\r\n            }\r\n        }        \r\n        if(event.type==\"mouseup\"){\r\n            if((Date.now()-this.SelectConfig[chatMessageId])/1000>0.2){\r\n                this.toggleSelectMessage(chatMessageId)\r\n                this.SelectConfig[chatMessageId]=0\r\n            }\r\n\r\n        }        \r\n    }\r\n    toggleSelectMessage=(chatMessageId)=>{\r\n        let selectMessages=[...this.state.selectMessages]\r\n        if(this.state.selectMessages.indexOf(chatMessageId)==-1){\r\n            selectMessages.push(chatMessageId)\r\n        }else{\r\n            selectMessages.splice(selectMessages.indexOf(chatMessageId),1)\r\n        }\r\n        let canDeleteMessages=this.canDeleteMessages(selectMessages)\r\n        this.setState({selectMessages:selectMessages,canDeleteMessages:canDeleteMessages})\r\n    }\r\n    canDeleteMessages=(selectMessages)=>{\r\n        let UID=this.props.UID\r\n        let chatCreator=this.props.chats[this.props.match.params.id].creator\r\n        let canDeleteMessages=true\r\n        if(selectMessages.length<1){\r\n            canDeleteMessages=false\r\n        }else{\r\n            selectMessages.forEach(selectMessage=>{\r\n                canDeleteMessages*= ((UID==chatCreator||UID==this.getMessageFromChatEntry(selectMessage)?.user)&&!!this.props.chats[this.props.match.params.id].messages[selectMessage])\r\n            })\r\n        }\r\n        return !!canDeleteMessages\r\n    }\r\n    showImageModal=()=>{\r\n        this.setState({showImageModal:true})\r\n    }\r\n    hideImageModal=()=>{\r\n        this.setState({showImageModal:false,imageModalInitImage:null})\r\n    }\r\n    chekClipboard=(event)=>{\r\n        if(event.clipboardData.files.length>0){\r\n            let file=event.clipboardData.files[0]\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({showImageModal:true,imageModalInitImage:image.target.result})\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    forwardMessages=(newChatId)=>{\r\n        this.setState({forwardMessages:true})\r\n        this.state.selectMessages.forEach(chatMessageId=>{\r\n            this.props.forwardMessage(newChatId,this.getMessageFromChatEntry(chatMessageId))\r\n        })\r\n        this.setState({forwardMessages:false,selectMessages:[]})\r\n        this.props.history.push(\"/chats/\"+newChatId)\r\n    }\r\n  \r\n    inputRef=React.createRef()\r\n    render() {\r\n        //формирование массива сообщений с чата\r\n        let chat=this.props.chats[this.props.match.params.id]\r\n        let chatMessages=[]\r\n        if(chat && chat.messages){\r\n            Object.keys(chat.messages).map((messageId,num)=>{\r\n                if(this.props.messages[chat.messages[messageId].message]){\r\n                    let newMessage={...this.getMessageFromChatEntry(messageId),chatMessageId:messageId}\r\n                    chatMessages.push(newMessage)\r\n                \r\n                }\r\n            })\r\n        }\r\n        chatMessages.sort((m1,m2)=>{\r\n            return m1.date-m2.date\r\n        })\r\n        \r\n        //Загрузка\r\n        if(!chat || chat==\"LOADING\"){\r\n            return  <div className={classes.Chat}>\r\n                        <div className={classes.Status}>Загрузка...</div>\r\n                    </div>\r\n        }\r\n        //Чата не существует\r\n\r\n        if(chat==\"NOT_EXIST\"){\r\n            let breakElement=null\r\n            if(window.innerWidth<=650){\r\n                breakElement=<br></br>\r\n            }\r\n            return  <div className={classes.Chat} onClick={()=>{this.props.history.push(\"/chats\")}}>\r\n                        <div className={classes.Status} >Чата не существует {breakElement} или {breakElement} он бы удален</div>\r\n                    </div>\r\n        }\r\n\r\n        //обрабока хедера чата\r\n        let headerContent=null\r\n        if(this.state.selectMessages.length<1){\r\n            //Обычный режим\r\n            headerContent=<div className={classes.HeaderInfo}>\r\n                <img className={classes.HeaderBackArrow} onClick={()=>{this.props.history.push(\"/chats\")}} src=\"/Images/backArrow.svg\"></img>\r\n                <div className={classes.HeaderName}>{chat.name}</div>\r\n                <img className={classes.HeaderThreeDots} onClick={()=>{this.setState({showChatMenu:true})}} src=\"/Images/threeDots.svg\"></img>\r\n            </div>\r\n        }else{\r\n            //Режим выделенных сообщений\r\n            headerContent=<div className={classes.HeaderSelect}>\r\n                <div className={classes.HeaderButtonsWrapper}>\r\n                    {this.state.canDeleteMessages&&<button className={classes.HeaderButton} onClick={this.deleteMessages}>\r\n                        Удалить\r\n                    </button>}\r\n                    <button className={classes.HeaderButton} onClick={()=>{this.setState({forwardMessages:true})}}>\r\n                        Переслать\r\n                    </button>\r\n                </div>\r\n                <button className={classes.HeaderButtonCancel} onClick={()=>{this.setState({selectMessages:[]})}}>Отмена</button>\r\n            </div>\r\n        }\r\n    \r\n        let height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0); \r\n        return (\r\n            <div className={classes.Chat}>\r\n                {headerContent}\r\n                <div className={classes.ChatWindow} style={{\"height\":height-120-(this.state.replyMessage?50:0)  }}>\r\n                    {chatMessages.map(message=>{\r\n                        return  <Message \r\n                            key={message.id}\r\n                            toggleSelectMessageHandler  ={(event)=>{this.toggleSelectMessageHandler(message.chatMessageId,event)}} \r\n                            select={this.state.selectMessages.indexOf(message.chatMessageId)!=-1}\r\n                            author={message.user==this.props.UID}\r\n                            message={message} \r\n                            onDoubleClick={()=>{this.setState({replyMessage:message})}}\r\n                            users={this.props.users}\r\n                            replyMessage={this.getMessageFromChatEntry(message.replyChatMessageId)}\r\n                            >\r\n                        </Message>\r\n                    })}\r\n                </div>\r\n                \r\n                {this.state.replyMessage&&<div className={classes.ReplyWrapper}>\r\n                    <div className={classes.ReplyUser}>{this.state.replyMessage.user}</div>\r\n                    <div className={classes.ReplyMessage}>\r\n                        <MessageContent message={this.state.replyMessage}></MessageContent>\r\n                    </div>\r\n                    <span className={classes.ReplyCancel} onClick={()=>{this.setState({replyMessage:null})}}>✖</span>\r\n                </div>}\r\n\r\n                {Object.values(chat.members).indexOf(this.props.UID)>-1\r\n                ?\r\n                <div  className={classes.InputWrapper}>\r\n                    <textarea ref={this.inputRef} className={classes.Input} onPaste={this.chekClipboard}></textarea>\r\n                    <div className={classes.SendIconWrapper} onClick={this.showImageModal}>\r\n                        <img className={classes.SendIcon} src=\"/Images/camera.svg\"></img>\r\n                    </div>\r\n\r\n                    <div className={classes.SendIconWrapper} onClick={this.sendMessage} >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className={\"icon icon-tabler icon-tabler-send \"+classes.sendIcon} viewBox=\"0 0 24 24\"  stroke=\"#2c3e50\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                            <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\" />\r\n                            <path d=\"M21 3l-6.5 18a0.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a0.55 .55 0 0 1 0 -1l18 -6.5\" />\r\n                        </svg>\r\n                    </div>    \r\n                </div>\r\n                :\r\n                <div className={classes.EnterToChat} onClick={()=>{this.props.enterToChat(this.props.match.params.id)}}>\r\n                    Вступить в чат\r\n                </div>\r\n                }\r\n\r\n                \r\n                <ChatMenu \r\n                    close={()=>{this.setState({showChatMenu:false})}} \r\n                    chatExit={()=>{this.props.chatExit(this.props.match.params.id);\r\n                                   this.props.history.push(\"/chats\") }}\r\n                    isAdmin={this.props.UID==chat.creator}\r\n                    deleteChat={()=>{this.props.deleteChat(this.props.match.params.id)}}\r\n                    chatName={chat.name}\r\n                    chatDescription={chat.description}\r\n                    chatImage={chat.images?chat.images[Object.keys(chat.images)[0]]:null}\r\n                    show={this.state.showChatMenu}\r\n                    changeChatInfo={this.props.changeChatInfo}\r\n                    chatId={this.props.match.params.id}\r\n                    >\r\n                </ChatMenu>\r\n                \r\n                {this.state.forwardMessages&&<ListModal startForward={this.forwardMessages} close={()=>{this.setState({forwardMessages:false})}}>\r\n\r\n                </ListModal>}\r\n                {this.state.showImageModal&&\r\n                    <ImageInputModal \r\n                        close={this.hideImageModal} \r\n                        show={this.state.showImageModal} \r\n                        text={this.inputRef.current.value} \r\n                        initImage={this.state.imageModalInitImage}\r\n                        send={this.sendMessage}>\r\n                    </ImageInputModal>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        chats:state.chats.chats,\r\n        messages:state.chats.messages,\r\n        UID:state.auth.UID,\r\n        users:state.chats.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        sendMessage:(chatId,message,images,replyMessage)=>dispatch(actions.sendMessage(chatId,message,images,replyMessage)),\r\n        deleteMessage:(chatId,messageId)=>dispatch(actions.deleteMessage(chatId,messageId)),\r\n        forwardMessage:(chatId,message)=>dispatch(actions.forwardMessage(chatId,message)),\r\n        getChat:(chatId)=>dispatch(actions.getChat(chatId)),\r\n        enterToChat:(chatId)=>dispatch(actions.enterToChat(chatId)),\r\n        chatExit:(chatId)=>dispatch(actions.chatExit(chatId)),\r\n        deleteChat:(chatId)=>dispatch(actions.deleteChat(chatId)),\r\n        changeChatInfo:(chatId,name,description,image)=>dispatch(actions.changeChatInfo(chatId,name,description,image))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Chat))\r\n","D:\\Projects\\chat-app-main\\src\\Containers\\ChatsList\\ChatItem\\ChatItem.js",["175","176","177"],"import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport { getDate } from '../../../scripts/Date'\r\nimport classes from \"./ChatItem.module.css\"\r\n\r\nexport default (props)=> {\r\n  \r\n    return (\r\n        <NavLink to={\"/chats/\"+props.id} className={classes.Link} activeClassName={classes.active}>\r\n            <div className={classes.ChatItem} >\r\n                <div className={classes.Avatar}>\r\n                    <img className={classes.Avatar} src={props.avatar?props.avatar:\"/Images/noPhoto.jpg\"}></img>\r\n                </div>\r\n                <div className={classes.Wrapper}>\r\n                    <div className={classes.TopWrapper}>\r\n                        <div className={classes.Name}>{props.name}</div>\r\n\r\n                        <div className={classes.LastMessageTime}>\r\n                            {getDate( props.lastMessage?props.lastMessage.date:props.chatCreateDate)}\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.BottomWrapper}>\r\n                        {props.lastMessage?\r\n                            <MessageContent message={props.lastMessage}></MessageContent>:\r\n                            <div>Вы создали чат!!!</div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n        \r\n    )\r\n    \r\n}\r\n","D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\Navigation.js",[],"D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\Message\\Message.js",["178","179"],"import React from 'react'\r\nimport MessageContent from '../../../Components/MessageContent/MessageContent'\r\nimport ImagesBlock from '../../../Components/UI/ImagesBlock/ImagesBlock'\r\nimport { getDateHM } from '../../../scripts/Date'\r\nimport getName from '../../../scripts/getName'\r\nimport classes from \"./Message.module.css\"\r\nfunction Message(props) {\r\n    let style=null\r\n    if(props.author){\r\n        style={\r\n            marginLeft:\"auto\" \r\n        }\r\n    }\r\n  \r\n    let messageData={text:props.message.text,images:props.message.images}\r\n    if(props.message.isForward){\r\n        messageData={text:props.message.body.text,images:props.message.body.images}\r\n    }\r\n\r\n    let wrapperClasses=[classes.Message]\r\n    if(props.author){\r\n        wrapperClasses.push(classes.MessageAuthor)\r\n    }\r\n    if(!!props.images && !props.replyMessage && !props.isForward){\r\n        wrapperClasses.push(classes.MessageWithImages)\r\n    }\r\n    let userForwardName = \"\"\r\n    return (\r\n        \r\n        <div className={classes.MessageWrapper} onMouseDown={props.toggleSelectMessageHandler} onMouseUp={props.toggleSelectMessageHandler} onDoubleClick={props.onDoubleClick}>\r\n            <div className={wrapperClasses.join(\" \")} >\r\n                {props.message.isForward&&<div className={classes.ForwardMessage}>Переслано от {getName(props.users,props.message.body.user)}</div>}\r\n                {!props.author&&!props.message.isForward&&<div className={classes.AuthorName}>{getName(props.users,props.message.user)}</div>}\r\n                {props.replyMessage&&<div className={classes.Reply}>\r\n                    <div className={classes.ReplyUser}>{getName(props.users,props.replyMessage.user)}</div>  \r\n                    <MessageContent message={props.replyMessage}></MessageContent>\r\n                </div>}\r\n                {messageData.images&&<ImagesBlock images={messageData.images}></ImagesBlock>}\r\n                {messageData.text&&<p  className={classes.MessageText}>{messageData.text}</p>}\r\n                {props.select&&<div className={classes.Select}></div>}\r\n                <div className={classes.Date}>{getDateHM(props.message.date)}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","D:\\Projects\\chat-app-main\\src\\Containers\\ListModal\\ListModal.js",[],"D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\ImageInputModal\\ImageInputModal.js",[],"D:\\Projects\\chat-app-main\\src\\Components\\MessageContent\\MessageContent.js",[],"D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\CreateChat\\CreateChat.js",["180"],"import React, { Component,createRef } from 'react'\r\nimport Modal from \"../../../Components/UI/Modal/Modal\"\r\nimport classes from \"./CreateChat.module.css\"\r\nimport Button from \"../../UI/Button/Button\"\r\nexport default class CreateChat extends Component {\r\n    state={\r\n        showImageInputModal:false,\r\n        image:false,       \r\n    }\r\n    nameRef=createRef()\r\n    descRef=createRef()\r\n    imageInputRef=createRef()\r\n    createChat=()=>{\r\n        this.props.createChat(this.nameRef.current.value,this.descRef.current.value,this.state.image)\r\n    }\r\n    save=(images)=>{\r\n        this.setState({images:images})\r\n    }\r\n    selectFile=(event)=>{\r\n            let file=event.target.files[0]\r\n            if(file){\r\n                let reader  = new FileReader();\r\n                reader.onloadend = (image)=> {\r\n                    if(image.target.result.match(image)){\r\n                        this.setState({image:image.target.result})\r\n                    }\r\n                }\r\n                reader.readAsDataURL(file)\r\n            }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} close={this.props.hideModal}>\r\n                <div className={classes.AddChat}>\r\n                    <h2 className={classes.Title}>Создать чат</h2>\r\n                    <div className={classes.Wrapper}>\r\n                        <h3 className={classes.InputName}>Введите имя чата</h3>\r\n                        <input  ref={this.nameRef} className={classes.Input}></input>\r\n                    </div>\r\n                    <div className={classes.Wrapper}>\r\n                        <div className={classes.descImageWrapper}>\r\n                            <h3 className={classes.InputDesc}>Введите описание чата</h3>\r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.setState({showImageInputModal:true})}}>\r\n                                <img className={classes.Image} onClick={()=>{this.imageInputRef.current.click()}} \r\n                                    src={this.state.image?\r\n                                        this.state.image\r\n                                        :\r\n                                        \"/Images/noPhoto.jpg\"}\r\n                                       >\r\n                                    \r\n                                </img>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" id=\"inputFile\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                        <textarea ref={this.descRef} className={classes.descArea}></textarea>\r\n\r\n                    </div>\r\n                  \r\n                    <Button onClick={this.createChat} >Создать чат</Button>\r\n\r\n                </div>\r\n                   \r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","D:\\Projects\\chat-app-main\\src\\Components\\Navigation\\UserSetting\\UserSetting.js",["181"],"import React, { Component } from 'react'\r\n\r\nimport Button from '../../UI/Button/Button'\r\nimport Modal from '../../UI/Modal/Modal'\r\nimport classes from \"./UserSetting.module.css\"\r\nexport class UserSetting extends Component {\r\n    state={\r\n        imagesModal:false\r\n    }\r\n    componentDidUpdate(){     \r\n        console.log(\"da\"); \r\n        if(!!this.props.public&&!!this.NameInputRef.current){\r\n            this.NameInputRef.current.value=this.props.public.name\r\n        }\r\n    }\r\n    selectFile=(event)=>{\r\n        let file=event.target.files[0]\r\n        if(file){\r\n            let reader  = new FileReader();\r\n            reader.onloadend = (image)=> {\r\n                if(image.target.result.match(image)){\r\n                    this.setState({imagesModal:image.target.result})\r\n                    \r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n    imageInputRef=React.createRef()\r\n    NameInputRef=React.createRef()\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal show={this.props.show} close={this.props.hideModal} level={2}>\r\n                    <div className={classes.UserSetting}>\r\n                        <h2 className={classes.Title}>Настройки аккаунта</h2>\r\n                        <div className={classes.TopWrapper}>                            \r\n                            <div className={classes.ImageWrapper} onClick={()=>{this.imageInputRef.current.click()}}>\r\n                                <input ref={this.imageInputRef} style={{display:\"none\"}} type=\"file\" onChange={this.selectFile} accept=\"image/*\"></input>\r\n                                <img  src={this.state.imagesModal?this.state.imagesModal:\"/Images/noPhoto.jpg\"}></img>\r\n                            </div>\r\n                            <div className={classes.NameWrapper}>\r\n                                <h3 className={classes.NameTitle}>Имя пользователя</h3>\r\n                                <input ref={this.NameInputRef} className={classes.NameInput}></input>\r\n                            </div>\r\n                        </div>\r\n                        <Button className={classes.SaveButton} \r\n                                onClick={()=>{this.props.save(\"images\",this.NameInputRef.current.value);this.props.hideModal()}}\r\n                        >Сохранить изминения</Button>\r\n                    </div>\r\n                </Modal>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default UserSetting\r\n","D:\\Projects\\chat-app-main\\src\\Components\\UI\\ImagesBlock\\ImagesBlock.js",["182","183","184","185"],"import React from 'react'\r\nimport Background from '../Background/Background'\r\nimport Modal from '../Modal/Modal'\r\nimport classes from \"./ImagesBlock.module.css\"\r\nexport default class ImagesBlock extends React.Component {\r\n    state={\r\n        focusImage:-1\r\n    }\r\n    getImageWidth=(imagesCount,number)=>{\r\n        let imageWidthTable={\r\n            0:[0],\r\n            1:[100],\r\n            2:[100,100],\r\n            3:[100,50,50],\r\n            4:[100,100/3,100/3,100/3],\r\n            5:[100,50,50,50,50],\r\n            6:[100,50,50,100/3,100/3,100/3],\r\n            7:[100,100/3,100/3,100/3,100/3,100/3,100/3],\r\n            8:[50,50,50,50,50,50,50,50],\r\n            9:[50,50,50,50,50,50,100/3,100/3,100/3],\r\n            10:[50,50,50,50,100/3,100/3,100/3,100/3,100/3,100/3]\r\n        }   \r\n        return imageWidthTable[imagesCount][number]\r\n    }\r\n    getImageHeight=(imagesCount,number)=>{\r\n        let imageHeightTable={\r\n            0:[100],\r\n            1:[50],\r\n            2:[50],\r\n            3:[50],\r\n            4:[100/3],\r\n            5:[100/3],\r\n            6:[100/3],\r\n            7:[100/4],\r\n            8:[100/4],\r\n            9:[100/4],\r\n            10:[100/4]\r\n        }   \r\n        return imageHeightTable[imagesCount]\r\n    }\r\n    changeFocusImage=(event,imageIndex)=>{\r\n        let focusImageIndex=this.state.focusImage\r\n        let countOfImages=this.props.images.length\r\n        if(event.nativeEvent.wheelDelta<    0){\r\n  \r\n            if(focusImageIndex>=countOfImages-1){\r\n                focusImageIndex=0\r\n            }else{\r\n                focusImageIndex=focusImageIndex+1\r\n            }\r\n        }else{\r\n            if(focusImageIndex<=0){\r\n                focusImageIndex=countOfImages-1\r\n            }else{\r\n                focusImageIndex=focusImageIndex-1\r\n            }\r\n        }\r\n        this.setState({focusImage:focusImageIndex})\r\n    }\r\n    render(){\r\n        return (\r\n            <div className={classes.ImagesWrapper}>\r\n                        {this.props.images.map((image,num)=>{\r\n                            if(num<=10){\r\n                                return <div key={num}  style={{\r\n                                    width:this.getImageWidth(this.props.images.length,num)+\"%\",\r\n                                    height:this.getImageHeight(this.props.images.length,num)+\"%\",\r\n                                }}>\r\n                                    <img src={image} className={classes.Image} onClick={()=>{this.setState({focusImage:num})}}></img>\r\n                                </div>\r\n                            }\r\n                        })}\r\n                        {this.state.focusImage>-1 && <React.Fragment>\r\n                            <img className={classes.FocusImage} src={this.props.images[this.state.focusImage]} onClick={()=>{this.setState({focusImage:-1})}} onWheel={this.changeFocusImage}></img>\r\n                            <Background close={()=>{this.setState({focusImage:-1})}}></Background>   \r\n                        </React.Fragment>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\Projects\\chat-app-main\\src\\Components\\UI\\Background\\Background.js",[],"D:\\Projects\\chat-app-main\\src\\Components\\UI\\Modal\\Modal.js",["186","187"],"import React, { Component } from 'react'\r\nimport Background from '../Background/Background'\r\nimport classes from \"./Modal.module.css\"\r\nexport default (props)=> {\r\n        let style={}\r\n        if(props.noPadding){\r\n            style.padding=0\r\n            \r\n        }\r\n        let level=props.level?props.level:1\r\n        style.zIndex=level*101\r\n        let classList=[classes.Modal]\r\n        if(props.show){\r\n            classList.push(classes.Show)\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {props.show&&<Background close={props.close} level={props.level}></Background>}\r\n                <div className={classList.join(\" \")} style={style}>\r\n                    {props.show&&props.children}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    \r\n}\r\n","D:\\Projects\\chat-app-main\\src\\Components\\UI\\Button\\Button.js",[],"D:\\Projects\\chat-app-main\\src\\scripts\\Date.js",["188","189","190","191"],"const DAYS=[\r\n    'Воскресенье' ,'Понедельник' , 'Вторник' , 'Среда' , 'Четверг' , 'Пятница' , 'Суббота' \r\n]\r\nconst DAYS_S=[\r\n    'вс', 'пн' , 'вт' , 'ср' , 'чт' , 'пт' , 'сб' \r\n]\r\nconst MONTHS=[\r\n\t'январь', 'февраль', 'марть',\r\n\t'апрель', 'маь', 'июнь',\r\n\t'июль', 'августь', 'сентябрь',\r\n\t'октябрь', 'ноябрь', 'декабрь'\r\n]\r\nconst transformNumber=(nubmer)=>{\r\n    let string=nubmer+\"\"\r\n    if(string.length<2){\r\n        return \"0\"+string\r\n    }else{\r\n        return string\r\n    }\r\n\r\n}\r\nexport const getDate=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let res = Date.now()-date\r\n    let dayRes=res/ (24*60*60*1000)\r\n    if(dayRes<1){\r\n        return transformNumber(date.getHours())+\":\"+transformNumber(date.getMinutes())\r\n    }\r\n    if(dayRes<7){\r\n        return DAYS_S[date.getDay()]\r\n    }\r\n    if(dayRes<12){\r\n        let day=date.getDay()+1\r\n        let month=date.getMonth()+1\r\n        let year=date.getFullYear()+\"\"\r\n        year=year.substring(2,4)\r\n        return transformNumber(day)+\".\"+transformNumber(month)+\".\"+year\r\n    }\r\n}\r\n\r\nexport const getDateHM=(time)=>{\r\n  \r\n    let date = new Date(time)\r\n    let hours=date.getHours()+\"\"\r\n    let minutes=date.getMinutes()+\"\"\r\n    if(hours.length==1){\r\n        hours=\"0\"+hours\r\n    }\r\n    if(minutes.length==1){\r\n        minutes=\"0\"+minutes\r\n    }\r\n    return hours+\":\"+minutes\r\n}\r\n\r\n","D:\\Projects\\chat-app-main\\src\\scripts\\getName.js",["192"],"export default (users,userId)=>{\r\n    if (users[userId]?.public?.name ){\r\n        return users[userId].public.name  \r\n    }else{\r\n        return userId.substr(0,10)\r\n    }\r\n}","D:\\Projects\\chat-app-main\\src\\Containers\\Chat\\ChatMenu\\ChatMenu.js",["193"],"D:\\Projects\\chat-app-main\\src\\store\\chats\\actions.js",["194","195","196","197","198"],"import firebase from \"firebase\"\r\nimport * as types from \"../actionsConsts\"\r\n\r\n\r\nexport const createChat=(name,description,image)=>{\r\n    return (dispatch,state)=>{\r\n        //добавить к чатам\r\n        let UID = state().auth.UID\r\n\r\n        firebase.database().ref(\"/chats\").push(\r\n            {\r\n               \r\n                chatData:{\r\n                    creator:state().auth.UID,\r\n                    name:name,\r\n                    description:description,\r\n                    create:firebase.database.ServerValue.TIMESTAMP,\r\n                },\r\n                messagesData:{\r\n                    lastChangeDate:firebase.database.ServerValue.TIMESTAMP\r\n                },\r\n                searchName:name\r\n\r\n            }\r\n        ).then(response=>{\r\n            //добавить в список чатов пользователя чат\r\n            // images.forEach(image)\r\n            if (image){\r\n                firebase.database().ref(\"/chats/\"+response.path.pieces_[1]+\"/chatData/images\").push(image)\r\n            }\r\n            firebase.database().ref(\"/users/\"+UID+\"/private/chats\").push({\r\n                chat:response.path.pieces_[1]\r\n            })\r\n            firebase.database().ref(\"/chats/\"+response.path.pieces_[1]+\"/chatData/members\").push(UID)\r\n        })\r\n    }\r\n}\r\nexport const enterToChat=(chatId)=>{\r\n    return (dispatch,state)=>{\r\n        //добавить к чатам\r\n        firebase.database().ref(\"/chats/\"+chatId+\"/chatData/members\").push(\r\n            \r\n               state().auth.UID\r\n            \r\n        )\r\n        firebase.database().ref(\"/users/\"+state().auth.UID+\"/private/chats\").push(\r\n            {\r\n                chat:chatId\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const deleteMessage=(chatId,messageId)=>{\r\n    return (dispatch,state)=>{\r\n        firebase.database().ref(\"/chats/\"+chatId+\"/messagesData/messages/\"+messageId).remove(\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n//подписка на получение иформации о своем аккаунте, вызывается при первом рендере листа чатов\r\nexport const subscribeInit=()=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n\r\n        //подписка на получение информации о чатаъ пользователя\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"users/\"+UID+\"/private/chats/\"\r\n        })\r\n        firebase.database().ref(\"users/\"+UID+\"/private/chats/\").on(\"value\",(userChatSnapshot)=>{\r\n            //обработка полученного списка чатов\r\n            dispatch(handleChats(\"init\",userChatSnapshot.val()))\r\n        \r\n            \r\n        })\r\n        //получение информации о пользователе, имя аватарка\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"users/\"+UID\r\n        })\r\n        firebase.database().ref(\"users/\"+UID).on(\"value\",(userDataSnapshot)=>{\r\n            dispatch({\r\n                type:types.SET_USER_INFO,\r\n                user:UID,\r\n                userData:userDataSnapshot.val()\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//получение чата\r\nexport const getChat=(chatId,entryId=false)=>{\r\n    return (dispatch,state)=>{\r\n        // если чат уже был подписан то не продолжать действия\r\n        if(state().chats.chats[chatId]){\r\n            return\r\n        }\r\n        let UID = state().auth.UID\r\n        // поставить чат в режим загрузки\r\n        dispatch({\r\n            type:types.CHAT_LOADING,\r\n            chatId:chatId\r\n        })\r\n        // получить информацию о чате(кроме сообщений)\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"chats/\"+chatId+\"/chatData\"\r\n        })\r\n        firebase.database().ref(\"chats/\"+chatId+\"/chatData\").on(\"value\",chatDataSnapshot=>{\r\n            const chatData = chatDataSnapshot.val()\r\n            //если чата не существует то удалить чат со списка чатов пользователя\r\n            //и поставить режим чата в не существует\r\n            if(!chatData){\r\n                dispatch({\r\n                    type:types.CHAT_FAIL,\r\n                    chatId:chatId\r\n                })\r\n                if(entryId){\r\n                    firebase.database().ref(\"users/\"+UID+\"/private/chats/\"+entryId).remove()\r\n                }\r\n            }\r\n            //если чат существует то получить дату последнего действия\r\n            else{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").once(\"value\",lastChangeMessagesDateSnapshot=>{\r\n\r\n                    const chatDataTransform={...chatData,id:chatId,}\r\n                    if(lastChangeMessagesDateSnapshot.val()){\r\n                        chatDataTransform.lastChangeMessagesDate=lastChangeMessagesDateSnapshot.val()\r\n                    }\r\n                    else{\r\n                        chatDataTransform.lastChangeMessagesDate=chatData.create\r\n                    }\r\n                    dispatch({\r\n                        type:types.CHAT_SUCCESS,\r\n                        chatId:chatId,\r\n                        chatData:chatDataTransform\r\n                    })\r\n                })\r\n            }\r\n\r\n        })\r\n        //получить все сообщения чата сортированные по дате и подписаться на добавление новых сообщений\r\n        dispatch({\r\n            type:types.ADD_FIREBASE_USER_LISTENER,\r\n            ref:\"chats/\"+chatId+\"/messagesData/messages\"\r\n        })\r\n        firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").orderByChild(\"date\").on(\"child_added\",chatMessageDataSnapshot=>{\r\n            //id сообщения\r\n            let messageId=chatMessageDataSnapshot.val().message\r\n            //id реплая на сообщение(в таблице чаты)\r\n            let replyChatMessageId=chatMessageDataSnapshot.val().replyChatMessageId\r\n            //получение самого сообщения \r\n            dispatch({\r\n                type:types.ADD_FIREBASE_USER_LISTENER,\r\n                ref:\"/messages/\"+messageId\r\n            })\r\n            firebase.database().ref(\"/messages/\"+messageId).on(\"value\",messageDataSnapshot=>{\r\n                const messageData=messageDataSnapshot.val()\r\n                //если сообщение есть то трансформировать его(записать туда id сообщения id сообщения реплая)\r\n                //и сохранить его \r\n                if(messageData){\r\n                    const messageDataTransform={...messageData,id:messageId}\r\n                    if(replyChatMessageId){\r\n                        messageDataTransform.replyChatMessageId=replyChatMessageId\r\n                    }\r\n                    //добавление в таблицу общих сообщений\r\n                    dispatch({\r\n                        type:types.SET_MESSAGE,\r\n                        messageId:messageId,\r\n                        messageData:messageDataTransform\r\n                    })\r\n                    //добавление в таблицу сообщений конкретного чата\r\n                    dispatch({\r\n                        type:types.APPEND_CHAT_MESSAGE,\r\n                        chatId:chatId,\r\n                        chatMessageId:chatMessageDataSnapshot.key,\r\n                        chatMessage:chatMessageDataSnapshot.val(),\r\n                        lastChangeMessagesDate:messageData.date\r\n                    })\r\n                    //получить информацию о отправителе сообщения\r\n                    if(!state()?.chats?.users[messageData.user]){\r\n                            dispatch({\r\n                                type:types.ADD_FIREBASE_USER_LISTENER,\r\n                                ref:\"users/\"+messageData.user+\"/public\"\r\n                            })\r\n                            firebase.database().ref(\"users/\"+messageData.user+\"/public\").on(\"value\",(userDataSnapshot)=>{\r\n                                dispatch({\r\n                                    type:types.SET_USER_INFO,\r\n                                    user:messageData.user,\r\n                                    userData:{public:userDataSnapshot.val()},\r\n                                    isMainUser:false\r\n                                })\r\n                            })\r\n                    }\r\n                    \r\n                }   \r\n            })\r\n        })\r\n        //если сообщение удалено то удалить его с сообщений конкретного чата\r\n        //сообщение все еще сохранено в приложении но не отображается \r\n        firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").on(\"child_removed\",chatMessageRemovedSnapshot=>{\r\n            dispatch({\r\n                type:types.REMOVE_CHAT_MESSAGE,\r\n                chatId:chatId,\r\n                chatMessageId:chatMessageRemovedSnapshot.key\r\n            })\r\n        })\r\n\r\n    }\r\n}\r\n\r\n// получение чатов со списка, переданного в функцию, имеет 2 режима \r\nexport const handleChats=(type,chats)=>{\r\n    return (dispatch,state)=>{\r\n        \r\n        //режим инициализации, срабатывает при обновления чатов пользователя\r\n        if(type==\"init\"){\r\n            if(chats){\r\n                let userChatsList=[]\r\n                Object.keys(chats).forEach(entryId=>{\r\n                    let chatId=chats[entryId].chat\r\n                    //подписка на чат\r\n                    dispatch(getChat(chatId,entryId))\r\n                    \r\n                    userChatsList.push(chats[entryId].chat)                \r\n                })\r\n                dispatch({\r\n                    type:types.SET_USER_CHATS_LIST,\r\n                    chatsList:userChatsList\r\n                })\r\n            }else{\r\n                dispatch({\r\n                    type:types.SET_USER_CHATS_LIST,\r\n                    chatsList:[]\r\n                })\r\n            }\r\n        }\r\n        //режим поиска, срабатывает для обработки поискового запроса на чаты\r\n        if(type==\"search\"){\r\n            if(!chats){\r\n                dispatch({\r\n                    type:types.SET_SEARCH_CHATS_LIST,\r\n                    chatsList:[]\r\n                })\r\n                return\r\n            }\r\n            let searchChatsList=[]\r\n            Object.keys(chats).forEach(entryId=>{\r\n                let chatId=entryId\r\n                //подписка на чат\r\n                dispatch(getChat(chatId))\r\n                searchChatsList.push(entryId)                \r\n            })\r\n            dispatch({\r\n                type:types.SET_SEARCH_CHATS_LIST,\r\n                chatsList:searchChatsList\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const sendMessage=(chatId,message,images,replyMessage)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n        let date=firebase.database.ServerValue.TIMESTAMP\r\n        let text=message.trim()\r\n        if(text.length<1 && images.length<1){\r\n            return \r\n        }\r\n        firebase.database().ref(\"messages/\").push({\r\n            user:UID,\r\n            text:text,\r\n            images:images,\r\n            date:date,\r\n        }).then(response=>{\r\n            let replyChatMessageId=null\r\n            if(replyMessage){\r\n                replyChatMessageId=replyMessage.chatMessageId\r\n            }\r\n            firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages\").push({\r\n                message:response.path.pieces_[1],\r\n                replyChatMessageId:replyChatMessageId,\r\n\r\n            }).then(()=>{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").set(date)\r\n            })\r\n\r\n        })\r\n    }\r\n}\r\nexport const forwardMessage=(chatId,message)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n        // firebase.database().ref(\"users/\"+UID+\"/chats\").off()\r\n        let date=firebase.database.ServerValue.TIMESTAMP\r\n        let newBody=null\r\n        if (message.isForward){\r\n            newBody={\r\n                ...message.body\r\n            }\r\n        }else{\r\n            newBody={\r\n                ...message\r\n            }\r\n        }\r\n        firebase.database().ref(\"messages/\").push({\r\n            user:UID,\r\n            body:newBody,\r\n            isForward:true,\r\n            date:date\r\n        }).then(response=>{\r\n\r\n            firebase.database().ref(\"chats/\"+chatId+\"/messagesData/messages/\").push({\r\n                message:response.path.pieces_[1],\r\n            }).then(()=>{\r\n                firebase.database().ref(\"chats/\"+chatId+\"/messagesData/lastChangeDate\").set(date)\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nlet checkAdmin=(chatId,state)=>{\r\n    console.log(state.chats.chats[chatId].creator==state.auth.UID);\r\n    if(state.chats.chats[chatId].creator==state.auth.UID){\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\n//удалить чат с базы, подписки на чат удалятся сами через метод getChat()\r\nexport const deleteChat=(chatId)=>{\r\n    return (dispatch,state)=>{\r\n        let UID = state().auth.UID\r\n        if(checkAdmin(chatId,state())){\r\n            firebase.database().ref(\"chats/\"+chatId).remove()\r\n\r\n        }\r\n    }\r\n}\r\n//поиск чатов\r\nexport const search=(searchParam)=>{\r\n    return (dispatch,state)=>{\r\n        firebase.database().ref(\"chats/\").orderByChild('searchName').startAt(searchParam).endAt(searchParam+\"\\uf8ff\").once(\"value\",snaphot=>{\r\n            dispatch(handleChats(\"search\",snaphot.val()))\r\n        })\r\n    }\r\n}\r\n\r\nexport const chatExit=(chatId)=>{\r\n    return(dispatch,state)=>{\r\n        let UID=state().auth.UID\r\n        firebase.database().ref(\"users/\"+UID+\"/private/chats\").orderByChild(\"chat\").startAt(chatId).endAt(chatId+\"\\uf8ff\").once(\"value\",chatExitSnapshot=>{\r\n            let entryId=Object.keys(chatExitSnapshot.val())[0]\r\n            console.log(\"ts\",entryId);\r\n            firebase.database().ref(\"users/\"+UID+\"/private/chats/\"+entryId).remove()\r\n            firebase.database().ref(\"chats/\"+chatId+\"/chatData/members/\").orderByValue().startAt(UID).endAt(UID+\"\\uf8ff\").once(\"value\",chatMemberSnaphot=>{\r\n                let entryMemberId=Object.keys(chatMemberSnaphot.val())[0]\r\n                firebase.database().ref(\"chats/\"+chatId+\"/chatData/members/\"+entryMemberId).remove()\r\n            })\r\n        })\r\n    }\r\n}\r\nexport const changeChatInfo=(chatId,name,description,image)=>{\r\n    return (dispatch,state)=>{\r\n        if(checkAdmin(chatId,state())){\r\n\r\n            if(name){\r\n                firebase.database().ref(\"/chats/\"+chatId+\"/chatData/name\").set(name)\r\n            }\r\n            if(description){\r\n                firebase.database().ref(\"/chats/\"+chatId+\"/chatData/description\").set(description)\r\n            }\r\n            if(image){\r\n                firebase.database().ref(\"/chats/\"+chatId+\"/chatData/images\").set({image:image})\r\n            }\r\n        }\r\n    }\r\n    \r\n}","D:\\Projects\\chat-app-main\\src\\store\\chats\\reducer.js",["199","200"],"import * as types from \"../actionsConsts\"\r\nconst initState={\r\n   chats:{},\r\n   messages:{},\r\n   userChatsList:[],\r\n   searchChatsList:[],\r\n   users:{}\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch (action.type) {\r\n\r\n        case types.SET_USER_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                userChatsList:action.chatsList\r\n            }\r\n        }\r\n        case types.SET_SEARCH_CHATS_LIST:{\r\n            return{\r\n                ...state,\r\n                searchChatsList:action.chatsList\r\n            }\r\n        }\r\n\r\n\r\n        case types.CHAT_LOADING:{\r\n            return{\r\n                ...state,\r\n                chats:{...state.chats,[action.chatId]:\"LOADING\"}\r\n            }\r\n        }\r\n        case types.CHAT_SUCCESS:\r\n            let prevChats={...state.chats}\r\n            let chatMessagesSuccess={}\r\n            if(prevChats[action.chatId].messages){\r\n                chatMessagesSuccess={...prevChats[action.chatId].messages}\r\n            }\r\n            prevChats[action.chatId]={...action.chatData,messages:chatMessagesSuccess}\r\n            return{\r\n                ...state,\r\n                chats: prevChats\r\n            }\r\n        case types.CHAT_FAIL:\r\n            let prevChats1={...state.chats}\r\n            prevChats1[action.chatId]=\"NOT_EXIST\"\r\n            return{\r\n                ...state,\r\n                chats:prevChats1\r\n            }\r\n        case types.APPEND_CHAT_MESSAGE:\r\n            let chatMessagesAppend={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesAppend={...state.chats[action.chatId].messages,[action.chatMessageId]:action.chatMessage}\r\n            }\r\n            let lastChangeMessagesDate=action.lastChangeMessagesDate\r\n            if(state.chats[action.chatId]&&state.chats[action.chatId].lastChangeMessagesDate>lastChangeMessagesDate){\r\n                lastChangeMessagesDate=state.chats[action.chatId].lastChangeMessagesDate\r\n            }\r\n            \r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesAppend,\r\n                        lastChangeMessagesDate:lastChangeMessagesDate\r\n                    }\r\n                }\r\n            }\r\n            \r\n        case types.REMOVE_CHAT_MESSAGE:\r\n            if(state.chats[action.chatId]==\"NOT_EXIST\"){\r\n                return state\r\n            }\r\n            let chatMessagesRemove={}\r\n            if(state.chats[action.chatId].messages){\r\n                chatMessagesRemove={...state.chats[action.chatId].messages}\r\n            }\r\n            delete chatMessagesRemove[action.chatMessageId]\r\n            return{\r\n                ...state,\r\n                chats:{\r\n                    ...state.chats,\r\n                    [action.chatId]:{\r\n                        ...state.chats[action.chatId],\r\n                        messages:chatMessagesRemove,\r\n                    }\r\n                }\r\n        }\r\n        case types.SET_MESSAGE:\r\n            let messages={...state.messages}\r\n            messages[action.messageId]={...action.messageData}\r\n            return{\r\n                ...state,\r\n                messages:messages\r\n            }\r\n        case types.SET_USER_INFO:\r\n            let userData={}\r\n            if(action.isMainUser){\r\n                userData.public=action.userData\r\n            }else{\r\n                userData={...action.userData}\r\n            }\r\n            return{\r\n                ...state,\r\n                users:{\r\n                    ...state.users,\r\n                    [action.user]:userData\r\n                }\r\n        }\r\n        case types.CLEAN_CHATS_DATA:\r\n            return initState\r\n        \r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}",{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":7,"column":21,"nodeType":"207","messageId":"208","endLine":7,"endColumn":31},{"ruleId":"209","severity":1,"message":"210","line":40,"column":26,"nodeType":"211","messageId":"212","endLine":40,"endColumn":28},{"ruleId":"213","severity":1,"message":"214","line":10,"column":1,"nodeType":"215","endLine":52,"endColumn":2},{"ruleId":"205","severity":1,"message":"216","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":16},{"ruleId":"205","severity":1,"message":"217","line":4,"column":8,"nodeType":"207","messageId":"208","endLine":4,"endColumn":12},{"ruleId":"205","severity":1,"message":"218","line":5,"column":8,"nodeType":"207","messageId":"208","endLine":5,"endColumn":20},{"ruleId":"205","severity":1,"message":"219","line":19,"column":21,"nodeType":"207","messageId":"208","endLine":19,"endColumn":30},{"ruleId":"205","severity":1,"message":"219","line":37,"column":21,"nodeType":"207","messageId":"208","endLine":37,"endColumn":30},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"205","severity":1,"message":"221","line":2,"column":9,"nodeType":"207","messageId":"208","endLine":2,"endColumn":19},{"ruleId":"222","severity":1,"message":"223","line":44,"column":25,"nodeType":"224","endLine":44,"endColumn":59},{"ruleId":"209","severity":1,"message":"210","line":59,"column":32,"nodeType":"211","messageId":"212","endLine":59,"endColumn":34},{"ruleId":"209","severity":1,"message":"210","line":62,"column":32,"nodeType":"211","messageId":"212","endLine":62,"endColumn":34},{"ruleId":"209","severity":1,"message":"210","line":86,"column":76,"nodeType":"211","messageId":"212","endLine":86,"endColumn":78},{"ruleId":"209","severity":1,"message":"225","line":23,"column":38,"nodeType":"211","messageId":"212","endLine":23,"endColumn":40},{"ruleId":"209","severity":1,"message":"225","line":37,"column":66,"nodeType":"211","messageId":"212","endLine":37,"endColumn":68},{"ruleId":"205","severity":1,"message":"226","line":74,"column":13,"nodeType":"207","messageId":"208","endLine":74,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":75,"column":52,"nodeType":"229","messageId":"230","endLine":75,"endColumn":54},{"ruleId":"209","severity":1,"message":"210","line":84,"column":22,"nodeType":"211","messageId":"212","endLine":84,"endColumn":24},{"ruleId":"209","severity":1,"message":"225","line":86,"column":64,"nodeType":"211","messageId":"212","endLine":86,"endColumn":66},{"ruleId":"209","severity":1,"message":"210","line":90,"column":22,"nodeType":"211","messageId":"212","endLine":90,"endColumn":24},{"ruleId":"209","severity":1,"message":"210","line":100,"column":60,"nodeType":"211","messageId":"212","endLine":100,"endColumn":62},{"ruleId":"209","severity":1,"message":"210","line":116,"column":42,"nodeType":"211","messageId":"212","endLine":116,"endColumn":44},{"ruleId":"209","severity":1,"message":"210","line":116,"column":60,"nodeType":"211","messageId":"212","endLine":116,"endColumn":62},{"ruleId":"227","severity":1,"message":"228","line":154,"column":59,"nodeType":"229","messageId":"230","endLine":154,"endColumn":61},{"ruleId":"209","severity":1,"message":"210","line":167,"column":25,"nodeType":"211","messageId":"212","endLine":167,"endColumn":27},{"ruleId":"209","severity":1,"message":"210","line":174,"column":16,"nodeType":"211","messageId":"212","endLine":174,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":189,"column":17,"nodeType":"224","endLine":189,"endColumn":136},{"ruleId":"222","severity":1,"message":"223","line":191,"column":17,"nodeType":"224","endLine":191,"endColumn":137},{"ruleId":"209","severity":1,"message":"225","line":217,"column":93,"nodeType":"211","messageId":"212","endLine":217,"endColumn":95},{"ruleId":"209","severity":1,"message":"210","line":218,"column":49,"nodeType":"211","messageId":"212","endLine":218,"endColumn":51},{"ruleId":"222","severity":1,"message":"223","line":241,"column":25,"nodeType":"224","endLine":241,"endColumn":84},{"ruleId":"209","severity":1,"message":"210","line":263,"column":44,"nodeType":"211","messageId":"212","endLine":263,"endColumn":46},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":7,"column":1,"nodeType":"215","endLine":35,"endColumn":2},{"ruleId":"222","severity":1,"message":"223","line":13,"column":21,"nodeType":"224","endLine":13,"endColumn":107},{"ruleId":"205","severity":1,"message":"231","line":10,"column":9,"nodeType":"207","messageId":"208","endLine":10,"endColumn":14},{"ruleId":"205","severity":1,"message":"232","line":27,"column":9,"nodeType":"207","messageId":"208","endLine":27,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":44,"column":33,"nodeType":"224","endLine":49,"endColumn":41},{"ruleId":"222","severity":1,"message":"223","line":40,"column":33,"nodeType":"224","endLine":40,"endColumn":113},{"ruleId":"205","severity":1,"message":"233","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":13},{"ruleId":"227","severity":1,"message":"234","line":63,"column":59,"nodeType":"229","messageId":"235","endLine":63,"endColumn":61},{"ruleId":"222","severity":1,"message":"223","line":69,"column":37,"nodeType":"224","endLine":69,"endColumn":128},{"ruleId":"222","severity":1,"message":"223","line":74,"column":29,"nodeType":"224","endLine":74,"endColumn":191},{"ruleId":"205","severity":1,"message":"220","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":4,"column":1,"nodeType":"215","endLine":25,"endColumn":2},{"ruleId":"205","severity":1,"message":"236","line":1,"column":7,"nodeType":"207","messageId":"208","endLine":1,"endColumn":11},{"ruleId":"205","severity":1,"message":"237","line":7,"column":7,"nodeType":"207","messageId":"208","endLine":7,"endColumn":13},{"ruleId":"209","severity":1,"message":"210","line":47,"column":20,"nodeType":"211","messageId":"212","endLine":47,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":50,"column":22,"nodeType":"211","messageId":"212","endLine":50,"endColumn":24},{"ruleId":"213","severity":1,"message":"214","line":1,"column":1,"nodeType":"215","endLine":7,"endColumn":2},{"ruleId":"222","severity":1,"message":"223","line":66,"column":21,"nodeType":"224","endLine":71,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":223,"column":16,"nodeType":"211","messageId":"212","endLine":223,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":245,"column":16,"nodeType":"211","messageId":"212","endLine":245,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":334,"column":50,"nodeType":"211","messageId":"212","endLine":334,"endColumn":52},{"ruleId":"209","severity":1,"message":"210","line":335,"column":41,"nodeType":"211","messageId":"212","endLine":335,"endColumn":43},{"ruleId":"205","severity":1,"message":"238","line":344,"column":13,"nodeType":"207","messageId":"208","endLine":344,"endColumn":16},{"ruleId":"213","severity":1,"message":"214","line":9,"column":1,"nodeType":"215","endLine":120,"endColumn":2},{"ruleId":"209","severity":1,"message":"210","line":73,"column":42,"nodeType":"211","messageId":"212","endLine":73,"endColumn":44},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'chatRoutes' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'ChatList' is defined but never used.","'Chat' is defined but never used.","'NoSelectChat' is defined but never used.","'errorCode' is assigned a value but never used.","'Component' is defined but never used.","'withRouter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'chat' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'style' is assigned a value but never used.","'userForwardName' is assigned a value but never used.","'Modal' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'DAYS' is assigned a value but never used.","'MONTHS' is assigned a value but never used.","'UID' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]